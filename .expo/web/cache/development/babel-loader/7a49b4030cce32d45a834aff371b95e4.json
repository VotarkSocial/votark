{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport RNFetchBlob from \"../index.js\";\nimport ProgressEvent from \"./ProgressEvent.js\";\nimport EventTarget from \"./EventTarget\";\nimport Blob from \"./Blob\";\nimport Log from \"../utils/log.js\";\nimport fs from \"../fs\";\nvar log = new Log('FileReader');\nlog.level(3);\n\nvar FileReader = function (_EventTarget) {\n  _inherits(FileReader, _EventTarget);\n\n  var _super = _createSuper(FileReader);\n\n  _createClass(FileReader, [{\n    key: \"isRNFBPolyFill\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"EMPTY\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"LOADING\",\n    get: function get() {\n      return 1;\n    }\n  }, {\n    key: \"DONE\",\n    get: function get() {\n      return 2;\n    }\n  }]);\n\n  function FileReader() {\n    var _this;\n\n    _classCallCheck(this, FileReader);\n\n    _this = _super.call(this);\n    _this._readState = 0;\n    log.verbose('file reader const');\n    _this._result = null;\n    return _this;\n  }\n\n  _createClass(FileReader, [{\n    key: \"abort\",\n    value: function abort() {\n      log.verbose('abort');\n    }\n  }, {\n    key: \"readAsArrayBuffer\",\n    value: function readAsArrayBuffer(b) {\n      log.verbose('readAsArrayBuffer', b);\n    }\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(b) {\n      log.verbose('readAsBinaryString', b);\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(b, label) {\n      log.verbose('readAsText', b, label);\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(b) {\n      log.verbose('readAsDataURL', b);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event, e) {\n      log.verbose('dispatch event', event, e);\n\n      _get(_getPrototypeOf(FileReader.prototype), \"dispatchEvent\", this).call(this, event, e);\n\n      if (typeof this[\"on\" + event] === 'function') {\n        this[\"on\" + event](e);\n      }\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return this._readyState;\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      return this._result;\n    }\n  }]);\n\n  return FileReader;\n}(EventTarget);\n\nexport { FileReader as default };","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/polyfill/FileReader.js"],"names":["RNFetchBlob","ProgressEvent","EventTarget","Blob","Log","fs","log","level","FileReader","_readState","verbose","_result","b","label","event","e","_readyState"],"mappings":";;;;;;;;;;;AAIA,OAAOA,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,IAAP;AACA,OAAOC,GAAP;AACA,OAAOC,EAAP;AAEA,IAAMC,GAAG,GAAG,IAAIF,GAAJ,CAAQ,YAAR,CAAZ;AAEAE,GAAG,CAACC,KAAJ,CAAU,CAAV;;IAEqBC,U;;;;;;;wBAiBC;AAAE,aAAO,IAAP;AAAa;;;wBAfjB;AAChB,aAAO,CAAP;AACD;;;wBACmB;AAClB,aAAO,CAAP;AACD;;;wBACgB;AACf,aAAO,CAAP;AACD;;;AAiBD,wBAAc;AAAA;;AAAA;;AACZ;AADY,UAddC,UAcc,GAdM,CAcN;AAEZH,IAAAA,GAAG,CAACI,OAAJ,CAAY,mBAAZ;AACA,UAAKC,OAAL,GAAe,IAAf;AAHY;AAIb;;;;4BAEO;AACNL,MAAAA,GAAG,CAACI,OAAJ,CAAY,OAAZ;AACD;;;sCAEiBE,C,EAAQ;AACxBN,MAAAA,GAAG,CAACI,OAAJ,CAAY,mBAAZ,EAAiCE,CAAjC;AACD;;;uCAEkBA,C,EAAQ;AACzBN,MAAAA,GAAG,CAACI,OAAJ,CAAY,oBAAZ,EAAkCE,CAAlC;AACD;;;+BAEUA,C,EAAQC,K,EAAe;AAChCP,MAAAA,GAAG,CAACI,OAAJ,CAAY,YAAZ,EAA0BE,CAA1B,EAA6BC,KAA7B;AACD;;;kCAEaD,C,EAAQ;AACpBN,MAAAA,GAAG,CAACI,OAAJ,CAAY,eAAZ,EAA6BE,CAA7B;AACD;;;kCAEaE,K,EAAOC,C,EAAG;AACtBT,MAAAA,GAAG,CAACI,OAAJ,CAAY,gBAAZ,EAA8BI,KAA9B,EAAqCC,CAArC;;AACA,oFAAoBD,KAApB,EAA2BC,CAA3B;;AACA,UAAG,OAAO,YAAUD,KAAV,CAAP,KAA8B,UAAjC,EAA6C;AAC3C,oBAAUA,KAAV,EAAmBC,CAAnB;AACD;AACF;;;wBAMgB;AACf,aAAO,KAAKC,WAAZ;AACD;;;wBAEY;AACX,aAAO,KAAKL,OAAZ;AACD;;;;EAvEqCT,W;;SAAnBM,U","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport RNFetchBlob from '../index.js'\nimport ProgressEvent from './ProgressEvent.js'\nimport EventTarget from './EventTarget'\nimport Blob from './Blob'\nimport Log from '../utils/log.js'\nimport fs from '../fs'\n\nconst log = new Log('FileReader')\n\nlog.level(3)\n\nexport default class FileReader extends EventTarget {\n\n  static get EMPTY(){\n    return 0\n  }\n  static get LOADING(){\n    return 1\n  }\n  static get DONE(){\n    return 2\n  }\n\n  // properties\n  _readState:number = 0;\n  _result:any;\n  _error:any;\n\n  get isRNFBPolyFill(){ return true }\n\n  // event handlers\n  onloadstart:(e:Event) => void;\n  onprogress:(e:Event) => void;\n  onload:(e:Event) => void;\n  onabort:(e:Event) => void;\n  onerror:(e:Event) => void;\n  onloadend:(e:Event) => void;\n\n  constructor() {\n    super()\n    log.verbose('file reader const')\n    this._result = null\n  }\n\n  abort() {\n    log.verbose('abort')\n  }\n\n  readAsArrayBuffer(b:Blob) {\n    log.verbose('readAsArrayBuffer', b)\n  }\n\n  readAsBinaryString(b:Blob) {\n    log.verbose('readAsBinaryString', b)\n  }\n\n  readAsText(b:Blob, label:?string) {\n    log.verbose('readAsText', b, label)\n  }\n\n  readAsDataURL(b:Blob) {\n    log.verbose('readAsDataURL', b)\n  }\n\n  dispatchEvent(event, e) {\n    log.verbose('dispatch event', event, e)\n    super.dispatchEvent(event, e)\n    if(typeof this[`on${event}`] === 'function') {\n      this[`on${event}`](e)\n    }\n  }\n\n  // private methods\n\n  // getters and setters\n\n  get readyState() {\n    return this._readyState\n  }\n\n  get result() {\n    return this._result\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}