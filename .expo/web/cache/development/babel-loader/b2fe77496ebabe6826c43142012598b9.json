{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/thecoder/Documentos/votark/votark/src/components/Comments/index.js\";\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as selectors from \"../../reducers\";\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./styles\";\nimport { Actions } from 'react-native-router-flux';\nimport { startAddingComment, startFetchingComments } from \"../../actions/comment\";\nimport { v4 } from 'uuid';\nimport { throttle } from 'lodash';\n\nvar Comments = function Comments(_ref) {\n  var comments = _ref.comments,\n      send = _ref.send,\n      fetch = _ref.fetch;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      comment = _useState2[0],\n      changeComment = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 3\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.comments,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, comments.map(function (comm) {\n    return React.createElement(Text, {\n      key: comm.id,\n      style: styles.comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, comm.content);\n  })), React.createElement(View, {\n    style: styles.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    className: \"user\",\n    type: \"text\",\n    placeholder: \"Write a Comment...\",\n    value: comment,\n    onChangeText: changeComment,\n    onChange: function onChange(e) {\n      return changeComment(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.send,\n    type: \"submit\",\n    onPress: function onPress() {\n      return send(comment);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, ' Send ')));\n};\n\nexport default connect(function (state) {\n  return {\n    comments: selectors.getComments(state),\n    versusid: selectors.getVersus(state) ? selectors.getVersus(state).id : null\n  };\n}, function (dispatch) {\n  return {\n    send: function send(comment, versusid) {\n      dispatch(startAddingComment(comment, versusid, v4()));\n    },\n    fetch: function fetch(versusid) {\n      dispatch(startFetchingComments(versusid));\n    }\n  };\n}, function (stateToProps, dispatchToProps) {\n  var interval = setInterval(dispatchToProps.fetch(stateToProps.versusid), 100000);\n  clearInterval(interval);\n  return {\n    comments: stateToProps.comments,\n    send: function send(comment) {\n      if (stateToProps.versusid) {\n        dispatchToProps.send(comment, stateToProps.versusid);\n      }\n    }\n  };\n})(Comments);","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/components/Comments/index.js"],"names":["connect","selectors","React","useState","useEffect","styles","Actions","startAddingComment","startFetchingComments","v4","throttle","Comments","comments","send","fetch","comment","changeComment","container","map","comm","id","content","row","input","e","target","value","state","getComments","versusid","getVersus","dispatch","stateToProps","dispatchToProps","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport {Text, View, Image, TextInput, TouchableOpacity } from 'react-native';\nimport * as selectors from '../../reducers'\nimport React, { useState, useEffect } from 'react';\nimport styles from './styles'\nimport { Actions } from 'react-native-router-flux';\nimport { startAddingComment, startFetchingComments } from '../../actions/comment';\nimport {v4} from 'uuid'\nimport { throttle } from 'lodash'\n\nconst Comments = ({comments,send,fetch}) => {\n\n  const [comment, changeComment] = useState('');\n  return (\n  <View style={styles.container}>\n      <TouchableOpacity style={styles.comments}>\n        {\n          comments.map(comm => \n            <Text key={comm.id} style={styles.comment} >{comm.content}</Text>\n            )\n        }\n      </TouchableOpacity>\n      <View style={styles.row}>\n            <TextInput\n            style={styles.input}\n            className=\"user\"\n            type=\"text\"\n            placeholder=\"Write a Comment...\"\n            value={comment}   \n            onChangeText={changeComment}\n            onChange={e => changeComment(e.target.value)}\n            />\n            <Text style={styles.send} type=\"submit\" \n            onPress={() =>\n              send(comment)\n            }>{' Send '}</Text>\n      </View>\n</View>\n)};\n\nexport default connect(\n  state => ({\n    comments: selectors.getComments(state),\n    versusid: selectors.getVersus(state)?selectors.getVersus(state).id:null\n  }),\n  dispatch => ({\n    send(comment,versusid){\n      dispatch(startAddingComment(comment,versusid,v4()))\n    },\n    fetch(versusid){\n      dispatch(startFetchingComments(versusid))\n    }\n  }),\n  (stateToProps, dispatchToProps) => {\n    const interval = setInterval(dispatchToProps.fetch(stateToProps.versusid), 100000);\n    clearInterval(interval)\n    return ({\n    comments: stateToProps.comments,\n    send(comment){\n      if(stateToProps.versusid){\n        dispatchToProps.send(comment,stateToProps.versusid)\n      }\n    },\n  })}\n)(Comments);\n"]},"metadata":{},"sourceType":"module"}