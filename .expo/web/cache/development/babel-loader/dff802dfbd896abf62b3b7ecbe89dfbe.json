{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/thecoder/Documentos/votark/votark/src/components/Login/index.js\";\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as actions from \"../../actions/auth\";\nimport * as selectors from \"../../reducers\";\nimport React, { useState } from 'react';\nimport styles from \"./styles\";\nimport { colors } from \"../../../configuration\";\nimport { reduxForm, Field } from 'redux-form';\nimport { Link } from \"react-router-dom\";\nimport { Actions } from 'react-native-router-flux';\nimport { normalize } from \"../../utils/normalize\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { URL } from \"../../../configuration\";\nimport Spinner from 'react-native-loading-spinner-overlay';\n\nvar submit = function submit(values) {\n  console.log('submitting form', values);\n};\n\nvar renderInput = function renderInput(_ref) {\n  var _ref$input = _ref.input,\n      onChange = _ref$input.onChange,\n      restInput = _objectWithoutProperties(_ref$input, [\"onChange\"]);\n\n  return React.createElement(TextInput, _extends({\n    style: styles.input,\n    onChangeText: onChange\n  }, restInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }));\n};\n\nvar Form = function Form(props) {\n  var handleSubmit = props.handleSubmit;\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Email:\"), React.createElement(Field, {\n    name: \"email\",\n    component: renderInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: handleSubmit(submit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nexport default reduxForm({\n  form: 'test'\n})(Form);","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/components/Login/index.js"],"names":["connect","actions","selectors","React","useState","styles","colors","reduxForm","Field","Link","Actions","normalize","LinearGradient","URL","Spinner","submit","values","console","log","renderInput","input","onChange","restInput","Form","props","handleSubmit","container","button","form"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,aAAxB;;;;;;AAEA,OAAO,KAAKC,OAAZ;AACA,OAAO,KAAKC,SAAZ;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP;AACA,SAASC,MAAT;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,SAAT;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,GAAT;AACA,OAAOC,OAAP,MAAoB,sCAApB;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,MAAM,EAAI;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,MAA/B;AACD,CAFD;;AAIA,IAAMG,WAAW,GAAG,SAAdA,WAAc,OAA0C;AAAA,wBAAvCC,KAAuC;AAAA,MAA9BC,QAA8B,cAA9BA,QAA8B;AAAA,MAAjBC,SAAiB;;AAC5D,SAAO,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEjB,MAAM,CAACe,KAAzB;AAAgC,IAAA,YAAY,EAAEC;AAA9C,KAA4DC,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAFD;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AAAA,MACZC,YADY,GACKD,KADL,CACZC,YADY;AAGpB,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEpB,MAAM,CAACqB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEP,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEM,YAAY,CAACV,MAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV,MAAM,CAACsB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAHF,CADF;AASD,CAZD;;AAcA,eAAepB,SAAS,CAAC;AACvBqB,EAAAA,IAAI,EAAE;AADiB,CAAD,CAAT,CAEZL,IAFY,CAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { Text, View, TextInput, Button, Image } from 'react-native';\nimport * as actions from '../../actions/auth';\nimport * as selectors from '../../reducers';\nimport React, { useState } from 'react';\nimport styles from './styles'\nimport { colors } from '../../../configuration';\nimport { reduxForm, Field } from 'redux-form'\nimport { Link } from \"react-router-dom\";\nimport { Actions } from 'react-native-router-flux';\nimport { normalize } from '../../utils/normalize';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { URL } from '../../../configuration'\nimport Spinner from 'react-native-loading-spinner-overlay';\n\n\nconst submit = values => {\n  console.log('submitting form', values)\n}\n\nconst renderInput = ({ input: { onChange, ...restInput }}) => {\n  return <TextInput style={styles.input} onChangeText={onChange} {...restInput} />\n}\n\nconst Form = props => {\n  const { handleSubmit } = props\n\n  return (\n    <View style={styles.container}>\n      <Text>Email:</Text>\n      <Field name=\"email\" component={renderInput} />\n      <TouchableOpacity onPress={handleSubmit(submit)}>\n        <Text style={styles.button}>Submit</Text>\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nexport default reduxForm({\n  form: 'test'\n})(Form)\n\n\n// const Login = ({\n//   onSubmit,\n//   handleSubmit,\n//   isLoading,\n//   error = null,\n// }) => {\n\n//   const [username, changeUsername] = useState('');\n//   const [password, changePassword] = useState('');\n\n//   const login = values => {\n//     console.log(values)\n//   }\n//   return (\n//     <View style={styles.container}>\n//       <LinearGradient\n//           colors={[colors.primary, 'transparent']}\n//           style={{\n//             width: '100%',\n//             height: '100%',\n//             alignItems: 'center',\n//             justifyContent: 'center'\n//           }}\n//         >\n//       <View style={styles.centered}>\n//       <Image style={styles.logo} source={require('../../public/static/img/logo.png')} ></Image>\n      \n//       <Field name={\"username\"} style={styles.input} component={TextInput} placeholder=\"username\"></Field>\n//       <Field name={\"username\"} style={styles.input} component={TextInput} placeholder=\"password\" secureTextEntry={true}></Field>\n//       {/* <TextInput\n//         style={styles.input}\n//         className=\"user\"\n//         type=\"text\"\n//         placeholder=\"username\"\n//         value={username}   \n//         onChangeText={changeUsername}\n//         onChange={e => changeUsername(e.target.value)}\n//       />\n//       <TextInput\n//           style={styles.input}\n//           className=\"password\"\n//           type=\"password\"\n//           secureTextEntry={true}\n//           placeholder=\"password\"\n//           value={password}\n//           onChangeText={changePassword}\n//           onChange={e=>changePassword(e.target.value)}\n//       /> */}\n//       {/* <View style={styles.option}>\n//         <Text style={styles.text} >{\"Did you forget your password? \"}</Text>\n//         {\n//           (typeof document === 'undefined')?(\n//             <Text style={styles.link} title={' reset password '}\n//             onPress={() =>\n//               Actions.ResetPassword(true)\n//             }>{' reset password '}</Text>\n//           ):(\n//             <Link to=\"/reset-password\" style={styles.navItem}>\n//               <Text style={styles.text}>{' reset password '}</Text>\n//             </Link>\n//           )\n//         }\n        \n//       </View> */}\n//       <View style={styles.errors}>\n//         {\n//         error && (\n//             <Text style={styles.error}>{ error }</Text>\n//         )\n//       }\n//         {\n//           isLoading ? (\n//             <View>\n//               <Text style={styles.error}>{'LOADING...'}</Text>\n//             </View>\n//           ) : (\n//             <View> \n//               <View style={styles.button}>\n//                   <Text style={styles.button} type=\"submit\" onPress={\n//                       handleSubmit(login)\n//                   }>{'LOGIN'}</Text>\n//               </View>\n//               {/* <View style={styles.option}>\n//                 <Text style={styles.text} >{\"Do you have an account?  \"}</Text>\n//                 {\n//                   (typeof document === 'undefined')?(\n//                     <Text style={styles.link} title={' register now '}\n//                     onPress={() =>\n//                       Actions.SignUp(true)\n//                     }>{' register now '}</Text>\n//                   ):(\n//                     <Link to=\"/signup\" style={styles.navItem}>\n//                       <Text style={styles.text}>{' register now'}</Text>\n//                     </Link>\n//                   )\n//                 }\n                \n//               </View> */}\n//             </View>\n//           )\n//         }\n//       </View>\n//       </View>\n//       </LinearGradient>\n//     </View>\n//   );\n// } \n\n// export default connect(\n//   state => ({\n//     isLoading: selectors.getIsAuthenticating(state),\n//     error: selectors.getAuthenticatingError(state),\n//     isAuthenticated: selectors.isAuthenticated(state),\n//   }),\n//   dispatch => ({\n//     onSubmit(username) {\n//       console.log(username)\n//       if(username && password){\n//         dispatch(actions.startLogin(username, password))\n//       }\n//       else if(!username){\n//         dispatch(actions.failLogin('WRITE A VALID USERNAME'))\n//       }\n//       else if(!password){\n//         dispatch(actions.failLogin('WRITE A VALID PASSWORD'))\n//       }\n//     },\n//   }),\n//   (stateToProps,disptachToProps) => {\n//     if(stateToProps.isAuthenticated){\n//       if(typeof document !== 'undefined'){\n//         window.location.href = URL\n//       }\n//       else{\n//         Actions.replace('Home')\n//       }\n//     }\n//     return ({...disptachToProps,...stateToProps})\n//   }\n// )(reduxForm({\n//   form: 'login',\n// })(Login))\n"]},"metadata":{},"sourceType":"module"}