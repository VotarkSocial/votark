{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nimport UUID from \"../utils/uuid\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nvar emitter = DeviceEventEmitter;\n\nvar RNFetchBlobReadStream = function () {\n  function RNFetchBlobReadStream(path, encoding, bufferSize, tick) {\n    var _this = this;\n\n    _classCallCheck(this, RNFetchBlobReadStream);\n\n    this.tick = 10;\n    if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');\n    this.encoding = encoding || 'utf8';\n    this.bufferSize = bufferSize;\n    this.path = path;\n    this.closed = false;\n    this.tick = tick;\n\n    this._onData = function () {};\n\n    this._onEnd = function () {};\n\n    this._onError = function () {};\n\n    this.streamId = 'RNFBRS' + UUID();\n    var subscription = emitter.addListener(this.streamId, function (e) {\n      var event = e.event,\n          detail = e.detail;\n\n      if (_this._onData && event === 'data') {\n        _this._onData(detail);\n\n        return;\n      } else if (_this._onEnd && event === 'end') {\n        _this._onEnd(detail);\n      } else {\n        if (_this._onError) _this._onError(detail);else throw new Error(detail);\n      }\n\n      if (event === 'error' || event === 'end') {\n        subscription.remove();\n        _this.closed = true;\n      }\n    });\n  }\n\n  _createClass(RNFetchBlobReadStream, [{\n    key: \"open\",\n    value: function open() {\n      if (!this.closed) RNFetchBlob.readStream(this.path, this.encoding, this.bufferSize || 10240, this.tick || -1, this.streamId);else throw new Error('Stream closed');\n    }\n  }, {\n    key: \"onData\",\n    value: function onData(fn) {\n      this._onData = fn;\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(fn) {\n      this._onError = fn;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(fn) {\n      this._onEnd = fn;\n    }\n  }]);\n\n  return RNFetchBlobReadStream;\n}();\n\nexport { RNFetchBlobReadStream as default };","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/class/RNFetchBlobReadStream.js"],"names":["NativeAppEventEmitter","UUID","RNFetchBlob","NativeModules","emitter","DeviceEventEmitter","RNFetchBlobReadStream","path","encoding","bufferSize","tick","Error","closed","_onData","_onEnd","_onError","streamId","subscription","addListener","e","event","detail","remove","readStream","fn"],"mappings":";;;;SAOEA,qB;AAEF,OAAOC,IAAP;AAEA,IAAMC,WAAW,GAAGC,aAAa,CAACD,WAAlC;AACA,IAAME,OAAO,GAAGC,kBAAhB;;IAEqBC,qB;AAQnB,iCAAYC,IAAZ,EAAyBC,QAAzB,EAA0CC,UAA1C,EAA+DC,IAA/D,EAA4E;AAAA;;AAAA;;AAAA,SAF5EA,IAE4E,GAF5D,EAE4D;AAC1E,QAAG,CAACH,IAAJ,EACE,MAAMI,KAAK,CAAC,0DAAD,CAAX;AACF,SAAKH,QAAL,GAAgBA,QAAQ,IAAI,MAA5B;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKK,MAAL,GAAc,KAAd;AACA,SAAKF,IAAL,GAAYA,IAAZ;;AACA,SAAKG,OAAL,GAAe,YAAM,CAAE,CAAvB;;AACA,SAAKC,MAAL,GAAc,YAAM,CAAE,CAAtB;;AACA,SAAKC,QAAL,GAAgB,YAAM,CAAE,CAAxB;;AACA,SAAKC,QAAL,GAAgB,WAAUf,IAAI,EAA9B;AAGA,QAAIgB,YAAY,GAAGb,OAAO,CAACc,WAAR,CAAoB,KAAKF,QAAzB,EAAmC,UAACG,CAAD,EAAO;AAAA,UACtDC,KADsD,GACrCD,CADqC,CACtDC,KADsD;AAAA,UAC/CC,MAD+C,GACrCF,CADqC,CAC/CE,MAD+C;;AAE3D,UAAG,KAAI,CAACR,OAAL,IAAgBO,KAAK,KAAK,MAA7B,EAAqC;AACnC,QAAA,KAAI,CAACP,OAAL,CAAaQ,MAAb;;AACA;AACD,OAHD,MAIK,IAAI,KAAI,CAACP,MAAL,IAAeM,KAAK,KAAK,KAA7B,EAAoC;AACvC,QAAA,KAAI,CAACN,MAAL,CAAYO,MAAZ;AACD,OAFI,MAGA;AACH,YAAG,KAAI,CAACN,QAAR,EACE,KAAI,CAACA,QAAL,CAAcM,MAAd,EADF,KAGE,MAAM,IAAIV,KAAJ,CAAUU,MAAV,CAAN;AACH;;AAED,UAAID,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,KAAnC,EAA0C;AACxCH,QAAAA,YAAY,CAACK,MAAb;AACA,QAAA,KAAI,CAACV,MAAL,GAAc,IAAd;AACD;AACF,KApBkB,CAAnB;AAsBD;;;;2BAEM;AACL,UAAG,CAAC,KAAKA,MAAT,EACEV,WAAW,CAACqB,UAAZ,CAAuB,KAAKhB,IAA5B,EAAkC,KAAKC,QAAvC,EAAiD,KAAKC,UAAL,IAAmB,KAApE,EAA4E,KAAKC,IAAL,IAAa,CAAC,CAA1F,EAA6F,KAAKM,QAAlG,EADF,KAGE,MAAM,IAAIL,KAAJ,CAAU,eAAV,CAAN;AACH;;;2BAEMa,E,EAAe;AACpB,WAAKX,OAAL,GAAeW,EAAf;AACD;;;4BAEOA,E,EAAI;AACV,WAAKT,QAAL,GAAgBS,EAAhB;AACD;;;0BAEMA,E,EAAI;AACT,WAAKV,MAAL,GAAcU,EAAd;AACD;;;;;;SA/DkBlB,qB","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  NativeAppEventEmitter,\n} from 'react-native'\nimport UUID from '../utils/uuid'\n\nconst RNFetchBlob = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\n\nexport default class RNFetchBlobReadStream {\n\n  path : string;\n  encoding : 'utf8' | 'ascii' | 'base64';\n  bufferSize : ?number;\n  closed : boolean;\n  tick : number = 10;\n\n  constructor(path:string, encoding:string, bufferSize?:?number, tick:number) {\n    if(!path)\n      throw Error('RNFetchBlob could not open file stream with empty `path`')\n    this.encoding = encoding || 'utf8'\n    this.bufferSize = bufferSize\n    this.path = path\n    this.closed = false\n    this.tick = tick\n    this._onData = () => {}\n    this._onEnd = () => {}\n    this._onError = () => {}\n    this.streamId = 'RNFBRS'+ UUID()\n\n    // register for file stream event\n    let subscription = emitter.addListener(this.streamId, (e) => {\n      let {event, detail} = e\n      if(this._onData && event === 'data') {\n        this._onData(detail)\n        return\n      }\n      else if (this._onEnd && event === 'end') {\n        this._onEnd(detail)\n      }\n      else {\n        if(this._onError)\n          this._onError(detail)\n        else\n          throw new Error(detail)\n      }\n      // when stream closed or error, remove event handler\n      if (event === 'error' || event === 'end') {\n        subscription.remove()\n        this.closed = true\n      }\n    })\n\n  }\n\n  open() {\n    if(!this.closed)\n      RNFetchBlob.readStream(this.path, this.encoding, this.bufferSize || 10240 , this.tick || -1, this.streamId)\n    else\n      throw new Error('Stream closed')\n  }\n\n  onData(fn:() => void) {\n    this._onData = fn\n  }\n\n  onError(fn) {\n    this._onError = fn\n  }\n\n  onEnd (fn) {\n    this._onEnd = fn\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}