{"ast":null,"code":"'use strict';\n\nvar required = require('requires-port'),\n    qs = require('querystringify'),\n    protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i,\n    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\nvar rules = [['#', 'hash'], ['?', 'query'], ['/', 'pathname'], ['@', 'auth', 1], [NaN, 'host', undefined, 1, 1], [/:(\\d+)$/, 'port', undefined, 1], [NaN, 'hostname', undefined, 1, 1]];\nvar ignore = {\n  hash: 1,\n  query: 1\n};\n\nfunction lolcation(loc) {\n  loc = loc || global.location || {};\n  var finaldestination = {},\n      type = typeof loc,\n      key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n\n    for (key in ignore) {\n      delete finaldestination[key];\n    }\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),\n      i = path.length,\n      last = path[i - 1],\n      unshift = false,\n      up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n  return path.join('/');\n}\n\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative,\n      extracted,\n      parse,\n      instruction,\n      index,\n      key,\n      instructions = rules.slice(),\n      type = typeof location,\n      url = this,\n      i = 0;\n\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n  location = lolcation(location);\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if (index = parse.exec(address)) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : '');\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  if (parser) url.query = parser(url.query);\n\n  if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  url.username = url.password = '';\n\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\n  url.href = url.toString();\n}\n\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname + ':' + value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n      if (url.port) value += ':' + url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\n  url.href = url.toString();\n  return url;\n}\n\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n  var query,\n      url = this,\n      protocol = url.protocol;\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':' + url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?' + query : query;\n  if (url.hash) result += url.hash;\n  return result;\n}\n\nURL.prototype = {\n  set: set,\n  toString: toString\n};\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = qs;\nmodule.exports = URL;","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-cached-image/node_modules/url-parse/index.js"],"names":["required","require","qs","protocolre","slashes","rules","NaN","undefined","ignore","hash","query","lolcation","loc","global","location","finaldestination","type","key","protocol","URL","unescape","pathname","test","href","extractProtocol","address","match","exec","toLowerCase","rest","resolve","relative","base","path","split","slice","concat","i","length","last","unshift","up","splice","push","join","parser","extracted","parse","instruction","index","instructions","url","indexOf","charAt","port","host","hostname","username","password","auth","origin","toString","set","part","value","fn","pop","ins","stringify","result","prototype","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nfunction lolcation(loc) {\n  loc = loc || global.location || {};\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @api private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @api private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} location Location defaults for relative paths.\n * @param {Boolean|Function} parser Parser for the query string.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL}\n * @api public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;\n\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nURL.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = qs;\n\nmodule.exports = URL;\n"]},"metadata":{},"sourceType":"script"}