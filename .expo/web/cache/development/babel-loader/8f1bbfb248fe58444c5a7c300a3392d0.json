{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/home/thecoder/Documentos/votark/votark/src/components/Login/index.js\";\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as actions from \"../../actions/auth\";\nimport * as selectors from \"../../reducers\";\nimport React, { useState } from 'react';\nimport styles from \"./styles\";\nimport { colors } from \"../../../configuration\";\nimport { Link } from \"react-router-dom\";\nimport { Actions } from 'react-native-router-flux';\nimport { normalize } from \"../../utils/normalize\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { URL } from \"../../../configuration\";\nimport Spinner from 'react-native-loading-spinner-overlay';\nimport { Field, reduxForm } from 'redux-form';\n\nvar submit = function submit(values) {\n  console.log('submitting form', values);\n};\n\nvar renderField = function renderField(_ref) {\n  var input = _ref.input,\n      label = _ref.label,\n      type = _ref.type,\n      _ref$meta = _ref.meta,\n      touched = _ref$meta.touched,\n      error = _ref$meta.error;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 3\n    }\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, label), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, React.createElement(\"input\", _extends({}, input, {\n    placeholder: label,\n    type: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  })), touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 28\n    }\n  }, error)));\n};\n\nvar Form = function Form(props) {\n  var error = props.error,\n      handleSubmit = props.handleSubmit,\n      pristine = props.pristine,\n      reset = props.reset,\n      submitting = props.submitting;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit(submit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(Field, {\n    name: \"username\",\n    type: \"text\",\n    component: renderField,\n    label: \"Username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), React.createElement(Field, {\n    name: \"password\",\n    type: \"password\",\n    component: renderField,\n    label: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), error && React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, error), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: submitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Log In\"), React.createElement(\"button\", {\n    type: \"button\",\n    disabled: pristine || submitting,\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Clear Values\")));\n};\n\nexport default reduxForm({\n  form: 'test'\n})(Form);","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/components/Login/index.js"],"names":["connect","actions","selectors","React","useState","styles","colors","Link","Actions","normalize","LinearGradient","URL","Spinner","Field","reduxForm","submit","values","console","log","renderField","input","label","type","meta","touched","error","Form","props","handleSubmit","pristine","reset","submitting","form"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { Text, View, TextInput, Button, Image, TouchableOpacity } from 'react-native';\nimport * as actions from '../../actions/auth';\nimport * as selectors from '../../reducers';\nimport React, { useState } from 'react';\nimport styles from './styles'\nimport { colors } from '../../../configuration';\nimport { Link } from \"react-router-dom\";\nimport { Actions } from 'react-native-router-flux';\nimport { normalize } from '../../utils/normalize';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { URL } from '../../../configuration'\nimport Spinner from 'react-native-loading-spinner-overlay';\nimport { Field, reduxForm } from 'redux-form'\n\nconst submit = values => {\n  console.log('submitting form', values)\n}\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n  <div>\n    <label>{label}</label>\n    <div>\n      <input {...input} placeholder={label} type={type} />\n      {touched && error && <span>{error}</span>}\n    </div>\n  </div>\n)\n\nconst Form = props => {\n  const { error, handleSubmit, pristine, reset, submitting } = props\n  return (\n    <form onSubmit={handleSubmit(submit)}>\n      <Field\n        name=\"username\"\n        type=\"text\"\n        component={renderField}\n        label=\"Username\"\n      />\n      <Field\n        name=\"password\"\n        type=\"password\"\n        component={renderField}\n        label=\"Password\"\n      />\n      {error && <strong>{error}</strong>}\n      <div>\n        <button type=\"submit\" disabled={submitting}>\n          Log In\n        </button>\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm({\n  form: 'test',\n})(Form)\n\n\n// const Login = ({\n//   onSubmit,\n//   handleSubmit,\n//   isLoading,\n//   error = null,\n// }) => {\n\n//   const [username, changeUsername] = useState('');\n//   const [password, changePassword] = useState('');\n\n//   const login = values => {\n//     console.log(values)\n//   }\n//   return (\n//     <View style={styles.container}>\n//       <LinearGradient\n//           colors={[colors.primary, 'transparent']}\n//           style={{\n//             width: '100%',\n//             height: '100%',\n//             alignItems: 'center',\n//             justifyContent: 'center'\n//           }}\n//         >\n//       <View style={styles.centered}>\n//       <Image style={styles.logo} source={require('../../public/static/img/logo.png')} ></Image>\n      \n//       <Field name={\"username\"} style={styles.input} component={TextInput} placeholder=\"username\"></Field>\n//       <Field name={\"username\"} style={styles.input} component={TextInput} placeholder=\"password\" secureTextEntry={true}></Field>\n//       {/* <TextInput\n//         style={styles.input}\n//         className=\"user\"\n//         type=\"text\"\n//         placeholder=\"username\"\n//         value={username}   \n//         onChangeText={changeUsername}\n//         onChange={e => changeUsername(e.target.value)}\n//       />\n//       <TextInput\n//           style={styles.input}\n//           className=\"password\"\n//           type=\"password\"\n//           secureTextEntry={true}\n//           placeholder=\"password\"\n//           value={password}\n//           onChangeText={changePassword}\n//           onChange={e=>changePassword(e.target.value)}\n//       /> */}\n//       {/* <View style={styles.option}>\n//         <Text style={styles.text} >{\"Did you forget your password? \"}</Text>\n//         {\n//           (typeof document === 'undefined')?(\n//             <Text style={styles.link} title={' reset password '}\n//             onPress={() =>\n//               Actions.ResetPassword(true)\n//             }>{' reset password '}</Text>\n//           ):(\n//             <Link to=\"/reset-password\" style={styles.navItem}>\n//               <Text style={styles.text}>{' reset password '}</Text>\n//             </Link>\n//           )\n//         }\n        \n//       </View> */}\n//       <View style={styles.errors}>\n//         {\n//         error && (\n//             <Text style={styles.error}>{ error }</Text>\n//         )\n//       }\n//         {\n//           isLoading ? (\n//             <View>\n//               <Text style={styles.error}>{'LOADING...'}</Text>\n//             </View>\n//           ) : (\n//             <View> \n//               <View style={styles.button}>\n//                   <Text style={styles.button} type=\"submit\" onPress={\n//                       handleSubmit(login)\n//                   }>{'LOGIN'}</Text>\n//               </View>\n//               {/* <View style={styles.option}>\n//                 <Text style={styles.text} >{\"Do you have an account?  \"}</Text>\n//                 {\n//                   (typeof document === 'undefined')?(\n//                     <Text style={styles.link} title={' register now '}\n//                     onPress={() =>\n//                       Actions.SignUp(true)\n//                     }>{' register now '}</Text>\n//                   ):(\n//                     <Link to=\"/signup\" style={styles.navItem}>\n//                       <Text style={styles.text}>{' register now'}</Text>\n//                     </Link>\n//                   )\n//                 }\n                \n//               </View> */}\n//             </View>\n//           )\n//         }\n//       </View>\n//       </View>\n//       </LinearGradient>\n//     </View>\n//   );\n// } \n\n// export default connect(\n//   state => ({\n//     isLoading: selectors.getIsAuthenticating(state),\n//     error: selectors.getAuthenticatingError(state),\n//     isAuthenticated: selectors.isAuthenticated(state),\n//   }),\n//   dispatch => ({\n//     onSubmit(username) {\n//       console.log(username)\n//       if(username && password){\n//         dispatch(actions.startLogin(username, password))\n//       }\n//       else if(!username){\n//         dispatch(actions.failLogin('WRITE A VALID USERNAME'))\n//       }\n//       else if(!password){\n//         dispatch(actions.failLogin('WRITE A VALID PASSWORD'))\n//       }\n//     },\n//   }),\n//   (stateToProps,disptachToProps) => {\n//     if(stateToProps.isAuthenticated){\n//       if(typeof document !== 'undefined'){\n//         window.location.href = URL\n//       }\n//       else{\n//         Actions.replace('Home')\n//       }\n//     }\n//     return ({...disptachToProps,...stateToProps})\n//   }\n// )(reduxForm({\n//   form: 'login',\n// })(Login))\n"]},"metadata":{},"sourceType":"module"}