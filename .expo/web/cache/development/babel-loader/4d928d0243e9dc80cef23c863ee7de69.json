{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\nimport * as types from \"../types/topic\";\n\nvar byId = function byId() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.TOPIC_FETCH_COMPLETED:\n      {\n        var _action$payload = action.payload,\n            entities = _action$payload.entities,\n            _order = _action$payload.order;\n\n        var newState = _objectSpread({}, state);\n\n        _order.forEach(function (id) {\n          newState[id] = _objectSpread(_objectSpread({}, entities[id]), {}, {\n            isConfirmed: true\n          });\n        });\n\n        return newState;\n      }\n\n    case types.TOPIC_ADDITION_STARTED:\n      {\n        var _newState = _objectSpread({}, state);\n\n        _newState[action.payload.id] = _objectSpread(_objectSpread({}, action.payload), {}, {\n          isConfirmed: false\n        });\n        return _newState;\n      }\n\n    case types.TOPIC_ADDITION_COMPLETED:\n      {\n        var _action$payload2 = action.payload,\n            oldId = _action$payload2.oldId,\n            Comment = _action$payload2.Comment;\n\n        var _newState2 = omit(state, oldId);\n\n        _newState2[Comment.id] = _objectSpread(_objectSpread({}, Comment), {}, {\n          isConfirmed: true\n        });\n        return _newState2;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar order = function order() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.TOPIC_FETCH_COMPLETED:\n      {\n        return action.payload.order;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isFetching = function isFetching() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.TOPIC_FETCH_STARTED:\n      {\n        return true;\n      }\n\n    case types.TOPIC_FETCH_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.TOPIC_FETCH_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar error = function error() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.TOPIC_FETCH_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.TOPIC_FETCH_STARTED:\n      {\n        return null;\n      }\n\n    case types.TOPIC_FETCH_COMPLETED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar selected = function selected() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.TOPIC_SELECTED:\n      {\n        return action.payload;\n      }\n\n    case types.TOPIC_FETCH_COMPLETED:\n      {\n        return state ? state : action.payload.order[0];\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default combineReducers({\n  byId: byId,\n  order: order,\n  isFetching: isFetching,\n  error: error,\n  selected: selected\n});\nexport var getTopic = function getTopic(state, id) {\n  return state.byId[id];\n};\nexport var getTopics = function getTopics(state) {\n  return state.order.map(function (id) {\n    return getTopic(state, id);\n  });\n};\nexport var isFetchingTopic = function isFetchingTopic(state) {\n  return state.isFetching;\n};\nexport var getFetchingErrorTopic = function getFetchingErrorTopic(state) {\n  return state.error;\n};\nexport var getSelectedTopic = function getSelectedTopic(state) {\n  return state.selected;\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/reducers/topic.js"],"names":["omit","combineReducers","types","byId","state","action","type","TOPIC_FETCH_COMPLETED","payload","entities","order","newState","forEach","id","isConfirmed","TOPIC_ADDITION_STARTED","TOPIC_ADDITION_COMPLETED","oldId","Comment","isFetching","TOPIC_FETCH_STARTED","TOPIC_FETCH_FAILED","error","selected","TOPIC_SELECTED","getTopic","getTopics","map","isFetchingTopic","getFetchingErrorTopic","getSelectedTopic"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\n\nimport * as types from '../types/topic';\n\n\nconst byId = (state = {}, action) => {\n  switch(action.type) {\n    case types.TOPIC_FETCH_COMPLETED: {\n      const { entities, order } = action.payload;\n      const newState = { ...state };\n      order.forEach(id => {\n        newState[id] = {\n          ...entities[id],\n          isConfirmed: true,\n        };\n      });\n      return newState;\n    }\n    case types.TOPIC_ADDITION_STARTED: {\n      const newState = { ...state };\n      newState[action.payload.id] = {\n        ...action.payload,\n        isConfirmed: false,\n      };\n      return newState;\n    }\n    case types.TOPIC_ADDITION_COMPLETED: {\n      const { oldId, Comment } = action.payload;\n      const newState = omit(state, oldId);\n      newState[Comment.id] = {\n        ...Comment,\n        isConfirmed: true,\n      };\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst order = (state = [], action) => {\n  switch(action.type) {\n    case types.TOPIC_FETCH_COMPLETED: {\n      return action.payload.order;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n\nconst isFetching = (state = false, action) => {\n  switch(action.type) {\n    case types.TOPIC_FETCH_STARTED: {\n      return true;\n    }\n    case types.TOPIC_FETCH_COMPLETED: {\n      return false;\n    }\n    case types.TOPIC_FETCH_FAILED: {\n      return false;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst error = (state = null, action) => {\n  switch(action.type) {\n    case types.TOPIC_FETCH_FAILED: {\n      return action.payload.error;\n    }\n    case types.TOPIC_FETCH_STARTED: {\n      return null;\n    }\n    case types.TOPIC_FETCH_COMPLETED: {\n      return null;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst selected = (state = null, action) => {\n    switch(action.type) {\n      case types.TOPIC_SELECTED: {\n        return action.payload;\n      }\n      case types.TOPIC_FETCH_COMPLETED: {\n        return state?state:action.payload.order[0];\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\nexport default combineReducers({\n  byId,\n  order,\n  isFetching,\n  error,\n  selected\n});\n\nexport const getTopic = (state, id) => state.byId[id];\nexport const getTopics = state => state.order.map(id => getTopic(state, id));\nexport const isFetchingTopic = state => state.isFetching;\nexport const getFetchingErrorTopic = state => state.error;\nexport const getSelectedTopic = state => state.selected;\n"]},"metadata":{},"sourceType":"module"}