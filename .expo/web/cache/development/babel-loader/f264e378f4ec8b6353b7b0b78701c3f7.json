{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nimport RNFetchBlobSession from \"./class/RNFetchBlobSession\";\nimport RNFetchBlobWriteStream from \"./class/RNFetchBlobWriteStream\";\nimport RNFetchBlobReadStream from \"./class/RNFetchBlobReadStream\";\nimport RNFetchBlobFile from \"./class/RNFetchBlobFile\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nvar emitter = DeviceEventEmitter;\nvar dirs = {\n  DocumentDir: RNFetchBlob.DocumentDir,\n  CacheDir: RNFetchBlob.CacheDir,\n  PictureDir: RNFetchBlob.PictureDir,\n  MusicDir: RNFetchBlob.MusicDir,\n  MovieDir: RNFetchBlob.MovieDir,\n  DownloadDir: RNFetchBlob.DownloadDir,\n  DCIMDir: RNFetchBlob.DCIMDir,\n  SDCardDir: RNFetchBlob.SDCardDir,\n  SDCardApplicationDir: RNFetchBlob.SDCardApplicationDir,\n  MainBundleDir: RNFetchBlob.MainBundleDir,\n  LibraryDir: RNFetchBlob.LibraryDir\n};\n\nfunction session(name) {\n  var s = RNFetchBlobSession.getSession(name);\n  if (s) return new RNFetchBlobSession(name);else {\n    RNFetchBlobSession.setSession(name, []);\n    return new RNFetchBlobSession(name, []);\n  }\n}\n\nfunction asset(path) {\n  if (Platform.OS === 'ios') {\n    if (/^assets-library\\:\\/\\//.test(path)) return path;\n  }\n\n  return 'bundle-assets://' + path;\n}\n\nfunction createFile(path, data, encoding) {\n  encoding = encoding || 'utf8';\n  return new Promise(function (resolve, reject) {\n    var handler = function handler(err) {\n      if (err) reject(new Error(err));else resolve();\n    };\n\n    if (encoding.toLowerCase() === 'ascii') {\n      if (Array.isArray(data)) RNFetchBlob.createFileASCII(path, data, handler);else reject(new Error('`data` of ASCII file must be an array contains numbers'));\n    } else {\n      RNFetchBlob.createFile(path, data, encoding, handler);\n    }\n  });\n}\n\nfunction writeStream(path, encoding, append) {\n  if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');\n  encoding = encoding || 'utf8';\n  append = append || false;\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.writeStream(path, encoding || 'base64', append || false, function (err, streamId) {\n      if (err) reject(new Error(err));else resolve(new RNFetchBlobWriteStream(streamId, encoding));\n    });\n  });\n}\n\nfunction readStream(path, encoding, bufferSize) {\n  var tick = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n  return Promise.resolve(new RNFetchBlobReadStream(path, encoding, bufferSize, tick));\n}\n\nfunction mkdir(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.mkdir(path, function (err, res) {\n      if (err) reject(new Error(err));else resolve();\n    });\n  });\n}\n\nfunction pathForAppGroup(groupName) {\n  return RNFetchBlob.pathForAppGroup(groupName);\n}\n\nfunction readFile(path, encoding, bufferSize) {\n  if (typeof path !== 'string') return Promise.reject(new Error('Invalid argument \"path\" '));\n  return RNFetchBlob.readFile(path, encoding);\n}\n\nfunction writeFile(path, data, encoding) {\n  encoding = encoding || 'utf8';\n  if (typeof path !== 'string') return Promise.reject('Invalid argument \"path\" ');\n\n  if (encoding.toLocaleLowerCase() === 'ascii') {\n    if (!Array.isArray(data)) return Promise.reject(new Error(\"Expected \\\"data\\\" is an Array when encoding is \\\"ascii\\\", however got \" + typeof data));else return RNFetchBlob.writeFileArray(path, data, false);\n  } else {\n    if (typeof data !== 'string') return Promise.reject(new Error(\"Expected \\\"data\\\" is a String when encoding is \\\"utf8\\\" or \\\"base64\\\", however got \" + typeof data));else return RNFetchBlob.writeFile(path, encoding, data, false);\n  }\n}\n\nfunction appendFile(path, data, encoding) {\n  encoding = encoding || 'utf8';\n  if (typeof path !== 'string') return Promise.reject('Invalid argument \"path\" ');\n\n  if (encoding.toLocaleLowerCase() === 'ascii') {\n    if (!Array.isArray(data)) return Promise.reject(new Error(\"Expected \\\"data\\\" is an Array when encoding is \\\"ascii\\\", however got \" + typeof data));else return RNFetchBlob.writeFileArray(path, data, true);\n  } else {\n    if (typeof data !== 'string') return Promise.reject(new Error(\"Expected \\\"data\\\" is a String when encoding is \\\"utf8\\\" or \\\"base64\\\", however got \" + typeof data));else return RNFetchBlob.writeFile(path, encoding, data, true);\n  }\n}\n\nfunction stat(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.stat(path, function (err, stat) {\n      if (err) reject(new Error(err));else {\n        if (stat) {\n          stat.size = parseInt(stat.size);\n          stat.lastModified = parseInt(stat.lastModified);\n        }\n\n        resolve(stat);\n      }\n    });\n  });\n}\n\nfunction scanFile(pairs) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.scanFile(pairs, function (err) {\n      if (err) reject(new Error(err));else resolve();\n    });\n  });\n}\n\nfunction cp(path, dest) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.cp(path, dest, function (err, res) {\n      if (err) reject(new Error(err));else resolve(res);\n    });\n  });\n}\n\nfunction mv(path, dest) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.mv(path, dest, function (err, res) {\n      if (err) reject(new Error(err));else resolve(res);\n    });\n  });\n}\n\nfunction lstat(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.lstat(path, function (err, stat) {\n      if (err) reject(new Error(err));else resolve(stat);\n    });\n  });\n}\n\nfunction ls(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.ls(path, function (err, res) {\n      if (err) reject(new Error(err));else resolve(res);\n    });\n  });\n}\n\nfunction unlink(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.unlink(path, function (err) {\n      if (err) {\n        reject(new Error(err));\n      } else resolve();\n    });\n  });\n}\n\nfunction exists(path) {\n  return new Promise(function (resolve, reject) {\n    try {\n      RNFetchBlob.exists(path, function (exist) {\n        resolve(exist);\n      });\n    } catch (err) {\n      reject(new Error(err));\n    }\n  });\n}\n\nfunction slice(src, dest, start, end) {\n  var p = Promise.resolve();\n  var size = 0;\n\n  function normalize(num, size) {\n    if (num < 0) return Math.max(0, size + num);\n    if (!num && num !== 0) return size;\n    return num;\n  }\n\n  if (start < 0 || end < 0 || !start || !end) {\n    p = p.then(function () {\n      return stat(src);\n    }).then(function (stat) {\n      size = Math.floor(stat.size);\n      start = normalize(start || 0, size);\n      end = normalize(end, size);\n      return Promise.resolve();\n    });\n  }\n\n  return p.then(function () {\n    return RNFetchBlob.slice(src, dest, start, end);\n  });\n}\n\nfunction isDir(path) {\n  return new Promise(function (resolve, reject) {\n    try {\n      RNFetchBlob.exists(path, function (exist, isDir) {\n        resolve(isDir);\n      });\n    } catch (err) {\n      reject(new Error(err));\n    }\n  });\n}\n\nfunction df() {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.df(function (err, stat) {\n      if (err) reject(err);else resolve(stat);\n    });\n  });\n}\n\nexport default {\n  RNFetchBlobSession: RNFetchBlobSession,\n  unlink: unlink,\n  mkdir: mkdir,\n  session: session,\n  ls: ls,\n  readStream: readStream,\n  mv: mv,\n  cp: cp,\n  writeStream: writeStream,\n  writeFile: writeFile,\n  appendFile: appendFile,\n  pathForAppGroup: pathForAppGroup,\n  readFile: readFile,\n  exists: exists,\n  createFile: createFile,\n  isDir: isDir,\n  stat: stat,\n  lstat: lstat,\n  scanFile: scanFile,\n  dirs: dirs,\n  slice: slice,\n  asset: asset,\n  df: df\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/fs.js"],"names":["NativeAppEventEmitter","RNFetchBlobSession","RNFetchBlobWriteStream","RNFetchBlobReadStream","RNFetchBlobFile","RNFetchBlob","NativeModules","emitter","DeviceEventEmitter","dirs","DocumentDir","CacheDir","PictureDir","MusicDir","MovieDir","DownloadDir","DCIMDir","SDCardDir","SDCardApplicationDir","MainBundleDir","LibraryDir","session","name","s","getSession","setSession","asset","path","Platform","OS","test","createFile","data","encoding","Promise","resolve","reject","handler","err","Error","toLowerCase","Array","isArray","createFileASCII","writeStream","append","streamId","readStream","bufferSize","tick","mkdir","res","pathForAppGroup","groupName","readFile","writeFile","toLocaleLowerCase","writeFileArray","appendFile","stat","size","parseInt","lastModified","scanFile","pairs","cp","dest","mv","lstat","ls","unlink","exists","exist","slice","src","start","end","p","normalize","num","Math","max","then","floor","isDir","df"],"mappings":"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","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  Platform,\n  NativeAppEventEmitter,\n} from 'react-native'\nimport RNFetchBlobSession from './class/RNFetchBlobSession'\nimport RNFetchBlobWriteStream from './class/RNFetchBlobWriteStream'\nimport RNFetchBlobReadStream from './class/RNFetchBlobReadStream'\nimport RNFetchBlobFile from './class/RNFetchBlobFile'\nimport type {\n  RNFetchBlobNative,\n  RNFetchBlobConfig,\n  RNFetchBlobStream\n} from './types'\n\nconst RNFetchBlob:RNFetchBlobNative = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\nconst dirs = {\n    DocumentDir :  RNFetchBlob.DocumentDir,\n    CacheDir : RNFetchBlob.CacheDir,\n    PictureDir : RNFetchBlob.PictureDir,\n    MusicDir : RNFetchBlob.MusicDir,\n    MovieDir : RNFetchBlob.MovieDir,\n    DownloadDir : RNFetchBlob.DownloadDir,\n    DCIMDir : RNFetchBlob.DCIMDir,\n    SDCardDir : RNFetchBlob.SDCardDir,\n    SDCardApplicationDir : RNFetchBlob.SDCardApplicationDir,\n    MainBundleDir : RNFetchBlob.MainBundleDir,\n    LibraryDir : RNFetchBlob.LibraryDir\n}\n\n/**\n * Get a file cache session\n * @param  {string} name Stream ID\n * @return {RNFetchBlobSession}\n */\nfunction session(name:string):RNFetchBlobSession {\n  let s = RNFetchBlobSession.getSession(name)\n  if(s)\n    return new RNFetchBlobSession(name)\n  else {\n    RNFetchBlobSession.setSession(name, [])\n    return new RNFetchBlobSession(name, [])\n  }\n}\n\nfunction asset(path:string):string {\n  if(Platform.OS === 'ios') {\n    // path from camera roll\n    if(/^assets-library\\:\\/\\//.test(path))\n      return path\n  }\n  return 'bundle-assets://' + path\n}\n\nfunction createFile(path:string, data:string, encoding: 'base64' | 'ascii' | 'utf8'):Promise {\n  encoding = encoding || 'utf8'\n  return new Promise((resolve, reject) => {\n    let handler = (err) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    }\n    if(encoding.toLowerCase() === 'ascii') {\n      if(Array.isArray(data))\n        RNFetchBlob.createFileASCII(path, data, handler)\n      else\n        reject(new Error('`data` of ASCII file must be an array contains numbers'))\n    }\n    else {\n      RNFetchBlob.createFile(path, data, encoding, handler)\n    }\n  })\n}\n\n/**\n * Create write stream to a file.\n * @param  {string} path Target path of file stream.\n * @param  {string} encoding Encoding of input data.\n * @param  {bool} append  A flag represent if data append to existing ones.\n * @return {Promise<WriteStream>} A promise resolves a `WriteStream` object.\n */\nfunction writeStream(\n  path : string,\n  encoding : 'utf8' | 'ascii' | 'base64',\n  append? : ?bool,\n):Promise<RNFetchBlobWriteStream> {\n  if(!path)\n    throw Error('RNFetchBlob could not open file stream with empty `path`')\n  encoding = encoding || 'utf8'\n  append = append || false\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.writeStream(path, encoding || 'base64', append || false, (err, streamId:string) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(new RNFetchBlobWriteStream(streamId, encoding))\n    })\n  })\n}\n\n/**\n * Create file stream from file at `path`.\n * @param  {string} path   The file path.\n * @param  {string} encoding Data encoding, should be one of `base64`, `utf8`, `ascii`\n * @param  {boolean} bufferSize Size of stream buffer.\n * @return {RNFetchBlobStream} RNFetchBlobStream stream instance.\n */\nfunction readStream(\n  path : string,\n  encoding : 'utf8' | 'ascii' | 'base64',\n  bufferSize? : ?number,\n  tick : ?number = 10\n):Promise<RNFetchBlobReadStream> {\n  return Promise.resolve(new RNFetchBlobReadStream(path, encoding, bufferSize, tick))\n}\n\n/**\n * Create a directory.\n * @param  {string} path Path of directory to be created\n * @return {Promise}\n */\nfunction mkdir(path:string):Promise {\n\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.mkdir(path, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    })\n  })\n\n}\n\n/**\n * Returns the path for the app group.\n * @param  {string} groupName Name of app group\n * @return {Promise}\n */\nfunction pathForAppGroup(groupName:string):Promise {\n  return RNFetchBlob.pathForAppGroup(groupName);\n}\n\n/**\n * Wrapper method of readStream.\n * @param  {string} path Path of the file.\n * @param  {'base64' | 'utf8' | 'ascii'} encoding Encoding of read stream.\n * @return {Promise<Array<number> | string>}\n */\nfunction readFile(path:string, encoding:string, bufferSize:?number):Promise<any> {\n  if(typeof path !== 'string')\n    return Promise.reject(new Error('Invalid argument \"path\" '))\n  return RNFetchBlob.readFile(path, encoding)\n}\n\n/**\n * Write data to file.\n * @param  {string} path  Path of the file.\n * @param  {string | number[]} data Data to write to the file.\n * @param  {string} encoding Encoding of data (Optional).\n * @return {Promise}\n */\nfunction writeFile(path:string, data:string | Array<number>, encoding:?string):Promise {\n  encoding = encoding || 'utf8'\n  if(typeof path !== 'string')\n    return Promise.reject('Invalid argument \"path\" ')\n  if(encoding.toLocaleLowerCase() === 'ascii') {\n    if(!Array.isArray(data))\n      return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFileArray(path, data, false);\n  } else {\n    if(typeof data !== 'string')\n      return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFile(path, encoding, data, false);\n  }\n}\n\nfunction appendFile(path:string, data:string | Array<number>, encoding:?string):Promise {\n  encoding = encoding || 'utf8'\n  if(typeof path !== 'string')\n    return Promise.reject('Invalid argument \"path\" ')\n  if(encoding.toLocaleLowerCase() === 'ascii') {\n    if(!Array.isArray(data))\n      return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFileArray(path, data, true);\n  } else {\n    if(typeof data !== 'string')\n      return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFile(path, encoding, data, true);\n  }\n}\n\n/**\n * Show statistic data of a path.\n * @param  {string} path Target path\n * @return {RNFetchBlobFile}\n */\nfunction stat(path:string):Promise<RNFetchBlobFile> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.stat(path, (err, stat) => {\n      if(err)\n        reject(new Error(err))\n      else {\n        if(stat) {\n          stat.size = parseInt(stat.size)\n          stat.lastModified = parseInt(stat.lastModified)\n        }\n        resolve(stat)\n      }\n    })\n  })\n}\n\n/**\n * Android only method, request media scanner to scan the file.\n * @param  {Array<Object<string, string>>} Array contains Key value pairs with key `path` and `mime`.\n * @return {Promise}\n */\nfunction scanFile(pairs:any):Promise {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.scanFile(pairs, (err) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    })\n  })\n}\n\nfunction cp(path:string, dest:string):Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.cp(path, dest, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\nfunction mv(path:string, dest:string):Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.mv(path, dest, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\nfunction lstat(path:string):Promise<Array<RNFetchBlobFile>> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.lstat(path, (err, stat) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(stat)\n    })\n  })\n}\n\nfunction ls(path:string):Promise<Array<String>> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.ls(path, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\n/**\n * Remove file at path.\n * @param  {string}   path:string Path of target file.\n * @return {Promise}\n */\nfunction unlink(path:string):Promise {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.unlink(path, (err) => {\n      if(err) {\n        reject(new Error(err))\n      }\n      else\n        resolve()\n    })\n  })\n}\n\n/**\n * Check if file exists and if it is a folder.\n * @param  {string} path Path to check\n * @return {Promise<bool, bool>}\n */\nfunction exists(path:string):Promise<bool, bool> {\n\n  return new Promise((resolve, reject) => {\n    try {\n      RNFetchBlob.exists(path, (exist) => {\n        resolve(exist)\n      })\n    } catch(err) {\n      reject(new Error(err))\n    }\n  })\n\n}\n\nfunction slice(src:string, dest:string, start:number, end:number):Promise {\n  let p = Promise.resolve()\n  let size = 0\n  function normalize(num, size) {\n    if(num < 0)\n      return Math.max(0, size + num)\n    if(!num && num !== 0)\n      return size\n    return num\n  }\n  if(start < 0 || end < 0 || !start || !end) {\n    p = p.then(() => stat(src))\n         .then((stat) => {\n           size = Math.floor(stat.size)\n           start = normalize(start || 0, size)\n           end = normalize(end, size)\n           return Promise.resolve()\n         })\n  }\n  return p.then(() => RNFetchBlob.slice(src, dest, start, end))\n}\n\nfunction isDir(path:string):Promise<bool, bool> {\n\n  return new Promise((resolve, reject) => {\n    try {\n      RNFetchBlob.exists(path, (exist, isDir) => {\n        resolve(isDir)\n      })\n    } catch(err) {\n      reject(new Error(err))\n    }\n  })\n\n}\n\nfunction df():Promise<{ free : number, total : number }> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.df((err, stat) => {\n      if(err)\n        reject(err)\n      else\n        resolve(stat)\n    })\n  })\n}\n\nexport default {\n  RNFetchBlobSession,\n  unlink,\n  mkdir,\n  session,\n  ls,\n  readStream,\n  mv,\n  cp,\n  writeStream,\n  writeFile,\n  appendFile,\n  pathForAppGroup,\n  readFile,\n  exists,\n  createFile,\n  isDir,\n  stat,\n  lstat,\n  scanFile,\n  dirs,\n  slice,\n  asset,\n  df\n}\n"]},"metadata":{},"sourceType":"module"}