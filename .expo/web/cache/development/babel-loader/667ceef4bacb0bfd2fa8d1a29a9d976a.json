{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nvar emitter = DeviceEventEmitter;\n\nvar RNFetchBlobWriteStream = function () {\n  function RNFetchBlobWriteStream(streamId, encoding, append) {\n    _classCallCheck(this, RNFetchBlobWriteStream);\n\n    this.id = streamId;\n    this.encoding = encoding;\n    this.append = append;\n  }\n\n  _createClass(RNFetchBlobWriteStream, [{\n    key: \"write\",\n    value: function write(data) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          var method = _this.encoding === 'ascii' ? 'writeArrayChunk' : 'writeChunk';\n\n          if (_this.encoding.toLocaleLowerCase() === 'ascii' && !Array.isArray(data)) {\n            reject('ascii input data must be an Array');\n            return;\n          }\n\n          RNFetchBlob[method](_this.id, data, function (error) {\n            if (error) reject(error);else resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          RNFetchBlob.closeStream(_this2.id, function () {\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }]);\n\n  return RNFetchBlobWriteStream;\n}();\n\nexport { RNFetchBlobWriteStream as default };","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/class/RNFetchBlobWriteStream.js"],"names":["NativeAppEventEmitter","RNFetchBlob","NativeModules","emitter","DeviceEventEmitter","RNFetchBlobWriteStream","streamId","encoding","append","id","data","Promise","resolve","reject","method","toLocaleLowerCase","Array","isArray","error","err","closeStream"],"mappings":";;;;SAOCA,qB;AAGD,IAAMC,WAAW,GAAGC,aAAa,CAACD,WAAlC;AACA,IAAME,OAAO,GAAGC,kBAAhB;;IAEqBC,sB;AAMnB,kCAAYC,QAAZ,EAA6BC,QAA7B,EAA8CC,MAA9C,EAA6D;AAAA;;AAC3D,SAAKC,EAAL,GAAUH,QAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;0BAEKE,I,EAAa;AAAA;;AACjB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACF,cAAIC,MAAM,GAAG,KAAI,CAACP,QAAL,KAAkB,OAAlB,GAA4B,iBAA5B,GAAgD,YAA7D;;AACA,cAAG,KAAI,CAACA,QAAL,CAAcQ,iBAAd,OAAsC,OAAtC,IAAiD,CAACC,KAAK,CAACC,OAAN,CAAcP,IAAd,CAArD,EAA0E;AACtEG,YAAAA,MAAM,CAAC,mCAAD,CAAN;AACA;AACH;;AACDZ,UAAAA,WAAW,CAACa,MAAD,CAAX,CAAoB,KAAI,CAACL,EAAzB,EAA6BC,IAA7B,EAAmC,UAACQ,KAAD,EAAW;AAC5C,gBAAGA,KAAH,EACEL,MAAM,CAACK,KAAD,CAAN,CADF,KAGEN,OAAO;AACV,WALD;AAMD,SAZD,CAYE,OAAMO,GAAN,EAAW;AACXN,UAAAA,MAAM,CAACM,GAAD,CAAN;AACD;AACF,OAhBM,CAAP;AAiBD;;;4BAEO;AAAA;;AACN,aAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACFZ,UAAAA,WAAW,CAACmB,WAAZ,CAAwB,MAAI,CAACX,EAA7B,EAAiC,YAAM;AACrCG,YAAAA,OAAO;AACR,WAFD;AAGD,SAJD,CAIE,OAAOO,GAAP,EAAY;AACZN,UAAAA,MAAM,CAACM,GAAD,CAAN;AACD;AACF,OARM,CAAP;AASD;;;;;;SA1CkBd,sB","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n NativeModules,\n DeviceEventEmitter,\n NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\n\nexport default class RNFetchBlobWriteStream {\n\n  id : string;\n  encoding : string;\n  append : bool;\n\n  constructor(streamId:string, encoding:string, append:string) {\n    this.id = streamId\n    this.encoding = encoding\n    this.append = append\n  }\n\n  write(data:string) {\n    return new Promise((resolve, reject) => {\n      try {\n        let method = this.encoding === 'ascii' ? 'writeArrayChunk' : 'writeChunk'\n        if(this.encoding.toLocaleLowerCase() === 'ascii' && !Array.isArray(data)) {\n            reject('ascii input data must be an Array')\n            return\n        }\n        RNFetchBlob[method](this.id, data, (error) => {\n          if(error)\n            reject(error)\n          else\n            resolve()\n        })\n      } catch(err) {\n        reject(err)\n      }\n    })\n  }\n\n  close() {\n    return new Promise((resolve, reject) => {\n      try {\n        RNFetchBlob.closeStream(this.id, () => {\n          resolve()\n        })\n      } catch (err) {\n        reject(err)\n      }\n    })\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}