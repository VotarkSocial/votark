{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(historyHashtagFetch),\n    _marked2 = _regeneratorRuntime.mark(watchHistoryHashtagFetch),\n    _marked3 = _regeneratorRuntime.mark(historyUserFetch),\n    _marked4 = _regeneratorRuntime.mark(watchHistoryUserFetch),\n    _marked5 = _regeneratorRuntime.mark(UserFetch),\n    _marked6 = _regeneratorRuntime.mark(watchUserFetch),\n    _marked7 = _regeneratorRuntime.mark(HashtagFetch),\n    _marked8 = _regeneratorRuntime.mark(watchHashgagFetch);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/search\";\nimport * as types from \"../types/search\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/hashtag\";\nimport * as userShema from \"../schemas/user\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction historyHashtagFetch(action) {\n  var isAuth, user, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function historyHashtagFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n          _context.next = 6;\n          return select(selectors.getAuthUserID);\n\n        case 6:\n          user = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 29;\n            break;\n          }\n\n          _context.next = 10;\n          return select(selectors.getAuthToken);\n\n        case 10:\n          token = _context.sent;\n          _context.next = 13;\n          return call(fetch, API_BASE_URL + \"/user/\" + user + \"/search_history_hashtag/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 13:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 23;\n            break;\n          }\n\n          _context.next = 17;\n          return response.json();\n\n        case 17:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.hashtags);\n          _context.next = 21;\n          return put(actions.completeHashtagHistoryFetching(normalized.entities.hashtags, normalized.result));\n\n        case 21:\n          _context.next = 29;\n          break;\n\n        case 23:\n          _context.next = 25;\n          return response.json();\n\n        case 25:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 29;\n          return put(actions.failHashtagHistoryFetching(non_field_errors[0]));\n\n        case 29:\n          _context.next = 35;\n          break;\n\n        case 31:\n          _context.prev = 31;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 35;\n          return put(actions.failFetchingComments('NETWORK ERROR'));\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 31]]);\n}\n\nexport function watchHistoryHashtagFetch() {\n  return _regeneratorRuntime.wrap(function watchHistoryHashtagFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.HASHTAG_SEARCH_HISTORY_FETCHED_STARTED, historyHashtagFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction historyUserFetch(action) {\n  var isAuth, user, token, response, jsonResult, normalized, _yield$response$json2, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function historyUserFetch$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context3.sent;\n          _context3.next = 6;\n          return select(selectors.getAuthUserID);\n\n        case 6:\n          user = _context3.sent;\n\n          if (!isAuth) {\n            _context3.next = 29;\n            break;\n          }\n\n          _context3.next = 10;\n          return select(selectors.getAuthToken);\n\n        case 10:\n          token = _context3.sent;\n          _context3.next = 13;\n          return call(fetch, API_BASE_URL + \"/user/\" + user + \"/search_history_user/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 13:\n          response = _context3.sent;\n\n          if (!(response.status === 200)) {\n            _context3.next = 23;\n            break;\n          }\n\n          _context3.next = 17;\n          return response.json();\n\n        case 17:\n          jsonResult = _context3.sent;\n          normalized = normalize(jsonResult, schemas.hashtags);\n          _context3.next = 21;\n          return put(actions.completeUserHistoryFetching(normalized.entities.hashtags, normalized.result));\n\n        case 21:\n          _context3.next = 29;\n          break;\n\n        case 23:\n          _context3.next = 25;\n          return response.json();\n\n        case 25:\n          _yield$response$json2 = _context3.sent;\n          non_field_errors = _yield$response$json2.non_field_errors;\n          _context3.next = 29;\n          return put(actions.failUserHistoryFetching(non_field_errors[0]));\n\n        case 29:\n          _context3.next = 35;\n          break;\n\n        case 31:\n          _context3.prev = 31;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 35;\n          return put(actions.failUserHistoryFetching('NETWORK ERROR'));\n\n        case 35:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 31]]);\n}\n\nexport function watchHistoryUserFetch() {\n  return _regeneratorRuntime.wrap(function watchHistoryUserFetch$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(types.USER_SEARCH_HISTORY_FETCHED_STARTED, historyUserFetch);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction UserFetch(action) {\n  var isAuth, user, token, response, jsonResult, normalized, _yield$response$json3, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function UserFetch$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context5.sent;\n          _context5.next = 6;\n          return select(selectors.getAuthUserID);\n\n        case 6:\n          user = _context5.sent;\n\n          if (!isAuth) {\n            _context5.next = 30;\n            break;\n          }\n\n          _context5.next = 10;\n          return select(selectors.getAuthToken);\n\n        case 10:\n          token = _context5.sent;\n          console.log(query);\n          _context5.next = 14;\n          return call(fetch, API_BASE_URL + \"/user/\" + user + \"/search_user/\", {\n            method: 'POST',\n            body: {\n              query: action.payload\n            },\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 14:\n          response = _context5.sent;\n\n          if (!(response.status === 200)) {\n            _context5.next = 24;\n            break;\n          }\n\n          _context5.next = 18;\n          return response.json();\n\n        case 18:\n          jsonResult = _context5.sent;\n          normalized = normalize(jsonResult, userShema.users);\n          _context5.next = 22;\n          return put(actions.completeUserFetching(normalized.entities.users, normalized.result));\n\n        case 22:\n          _context5.next = 30;\n          break;\n\n        case 24:\n          _context5.next = 26;\n          return response.json();\n\n        case 26:\n          _yield$response$json3 = _context5.sent;\n          non_field_errors = _yield$response$json3.non_field_errors;\n          _context5.next = 30;\n          return put(actions.failUserFetching(non_field_errors[0]));\n\n        case 30:\n          _context5.next = 36;\n          break;\n\n        case 32:\n          _context5.prev = 32;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 36;\n          return put(actions.failUserFetching('NETWORK ERROR'));\n\n        case 36:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 32]]);\n}\n\nexport function watchUserFetch() {\n  return _regeneratorRuntime.wrap(function watchUserFetch$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(types.USER_SEARCH_FETCHED_STARTED, UserFetch);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction HashtagFetch(action) {\n  var isAuth, user, token, response, jsonResult, normalized, _yield$response$json4, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function HashtagFetch$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context7.sent;\n          _context7.next = 6;\n          return select(selectors.getAuthUserID);\n\n        case 6:\n          user = _context7.sent;\n\n          if (!isAuth) {\n            _context7.next = 29;\n            break;\n          }\n\n          _context7.next = 10;\n          return select(selectors.getAuthToken);\n\n        case 10:\n          token = _context7.sent;\n          _context7.next = 13;\n          return call(fetch, API_BASE_URL + \"/user/\" + user + \"/search_hashtag/\", {\n            method: 'POST',\n            body: {\n              query: action.payload\n            },\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 13:\n          response = _context7.sent;\n\n          if (!(response.status === 200)) {\n            _context7.next = 23;\n            break;\n          }\n\n          _context7.next = 17;\n          return response.json();\n\n        case 17:\n          jsonResult = _context7.sent;\n          normalized = normalize(jsonResult, schemas.hashtags);\n          _context7.next = 21;\n          return put(actions.completeHashtagFetching(normalized.entities.hashtags, normalized.result));\n\n        case 21:\n          _context7.next = 29;\n          break;\n\n        case 23:\n          _context7.next = 25;\n          return response.json();\n\n        case 25:\n          _yield$response$json4 = _context7.sent;\n          non_field_errors = _yield$response$json4.non_field_errors;\n          _context7.next = 29;\n          return put(actions.failHashtagFetching(non_field_errors[0]));\n\n        case 29:\n          _context7.next = 35;\n          break;\n\n        case 31:\n          _context7.prev = 31;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 35;\n          return put(actions.failHashtagFetching('NETWORK ERROR'));\n\n        case 35:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 31]]);\n}\n\nexport function watchHashgagFetch() {\n  return _regeneratorRuntime.wrap(function watchHashgagFetch$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(types.HASHTAG_SEARCH_FETCHED_STARTED, HashtagFetch);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/search.js"],"names":["historyHashtagFetch","watchHistoryHashtagFetch","historyUserFetch","watchHistoryUserFetch","UserFetch","watchUserFetch","HashtagFetch","watchHashgagFetch","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","userShema","API_BASE_URL","action","isAuthenticated","isAuth","getAuthUserID","user","getAuthToken","token","fetch","method","headers","response","status","json","jsonResult","normalized","hashtags","completeHashtagHistoryFetching","entities","result","non_field_errors","failHashtagHistoryFetching","failFetchingComments","HASHTAG_SEARCH_HISTORY_FETCHED_STARTED","completeUserHistoryFetching","failUserHistoryFetching","USER_SEARCH_HISTORY_FETCHED_STARTED","console","log","query","body","payload","users","completeUserFetching","failUserFetching","USER_SEARCH_FETCHED_STARTED","completeHashtagFetching","failHashtagFetching","HASHTAG_SEARCH_FETCHED_STARTED"],"mappings":"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","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/search';\nimport * as types from '../types/search';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/hashtag';\nimport * as userShema from '../schemas/user'\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  \n  function* historyHashtagFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        const user = yield select(selectors.getAuthUserID);\n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/user/${user}/search_history_hashtag/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.hashtags);\n            yield put(\n            actions.completeHashtagHistoryFetching(\n                normalized.entities.hashtags,\n                normalized.result\n            ),\n            );\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failHashtagHistoryFetching(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failFetchingComments('NETWORK ERROR'));\n      }\n  }\n  \n  export function* watchHistoryHashtagFetch() {\n    yield takeEvery(\n      types.HASHTAG_SEARCH_HISTORY_FETCHED_STARTED,\n      historyHashtagFetch,\n    );\n  }\n\nfunction* historyUserFetch(action) {\ntry {\n    const isAuth = yield select(selectors.isAuthenticated);\n    const user = yield select(selectors.getAuthUserID);\n    if (isAuth) {\n        const token = yield select(selectors.getAuthToken);\n        const response = yield call(\n        fetch,\n        `${API_BASE_URL}/user/${user}/search_history_user/`,\n        {\n            method: 'GET',\n            headers:{\n            'Content-Type': 'application/json',\n            'Authorization': `JWT ${token}`,\n            },\n        }\n        );\n        if (response.status === 200) {\n        const jsonResult = yield response.json();\n        const normalized = normalize(jsonResult, schemas.hashtags);\n        yield put(\n        actions.completeUserHistoryFetching(\n            normalized.entities.hashtags,\n            normalized.result\n        ),\n        );\n        } else {\n        const { non_field_errors } = yield response.json();\n        yield put(actions.failUserHistoryFetching(non_field_errors[0]));\n        }\n    }\n    } catch (error) {\n    yield put(actions.failUserHistoryFetching('NETWORK ERROR'));\n    }\n}\n\nexport function* watchHistoryUserFetch() {\nyield takeEvery(\n    types.USER_SEARCH_HISTORY_FETCHED_STARTED,\n    historyUserFetch,\n);\n}\n\nfunction* UserFetch(action) {\ntry {\n    const isAuth = yield select(selectors.isAuthenticated);\n    const user = yield select(selectors.getAuthUserID);\n    if (isAuth) {\n        const token = yield select(selectors.getAuthToken);\n        console.log(query)\n        const response = yield call(\n        fetch,\n        `${API_BASE_URL}/user/${user}/search_user/`,\n        {\n            method: 'POST',\n            body: {query:action.payload},\n            headers:{\n            'Content-Type': 'application/json',\n            'Authorization': `JWT ${token}`,\n            },\n        }\n        );\n        if (response.status === 200) {\n        const jsonResult = yield response.json();\n        const normalized = normalize(jsonResult, userShema.users);\n        yield put(\n        actions.completeUserFetching(\n            normalized.entities.users,\n            normalized.result\n        ),\n        );\n        } else {\n        const { non_field_errors } = yield response.json();\n        yield put(actions.failUserFetching(non_field_errors[0]));\n        }\n    }\n    } catch (error) {\n    yield put(actions.failUserFetching('NETWORK ERROR'));\n    }\n}\n\nexport function* watchUserFetch() {\nyield takeEvery(\n    types.USER_SEARCH_FETCHED_STARTED,\n    UserFetch,\n);\n}\n\nfunction* HashtagFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        const user = yield select(selectors.getAuthUserID);\n        if (isAuth) {\n            const token = yield select(selectors.getAuthToken);\n            const response = yield call(\n            fetch,\n            `${API_BASE_URL}/user/${user}/search_hashtag/`,\n            {\n                method: 'POST',\n                body: {query:action.payload},\n                headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n                },\n            }\n            );\n            if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.hashtags);\n            yield put(\n            actions.completeHashtagFetching(\n                normalized.entities.hashtags,\n                normalized.result\n            ),\n            );\n            } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failHashtagFetching(non_field_errors[0]));\n            }\n        }\n        } catch (error) {\n        yield put(actions.failHashtagFetching('NETWORK ERROR'));\n        }\n    }\n    \n    export function* watchHashgagFetch() {\n    yield takeEvery(\n        types.HASHTAG_SEARCH_FETCHED_STARTED,\n        HashtagFetch,\n    );\n    }\n\n"]},"metadata":{},"sourceType":"module"}