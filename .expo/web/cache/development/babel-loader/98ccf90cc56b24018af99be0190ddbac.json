{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(versusFetch),\n    _marked2 = _regeneratorRuntime.mark(watchVersusFetch);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/versus\";\nimport * as types from \"../types/versus\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/versus\";\nimport { logout } from \"../actions/auth\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction versusFetch(action) {\n  var isAuth, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function versusFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(logout());\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return select(selectors.isAuthenticated);\n\n        case 5:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 28;\n            break;\n          }\n\n          _context.next = 9;\n          return select(selectors.getAuthToken);\n\n        case 9:\n          token = _context.sent;\n          _context.next = 12;\n          return call(fetch, API_BASE_URL + \"/user/versus/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 12:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 16;\n          return response.json();\n\n        case 16:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.versuses);\n          _context.next = 20;\n          return put(actions.completeFetchingVersus(normalized.entities.versuses, normalized.result));\n\n        case 20:\n          _context.next = 28;\n          break;\n\n        case 22:\n          _context.next = 24;\n          return response.json();\n\n        case 24:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 28;\n          return put(actions.failFetchingVersus(non_field_errors[0]));\n\n        case 28:\n          _context.next = 32;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t0 = _context[\"catch\"](2);\n\n        case 32:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 30]]);\n}\n\nexport function watchVersusFetch() {\n  return _regeneratorRuntime.wrap(function watchVersusFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.VERSUS_FETCHING_STARTED, versusFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/versus.js"],"names":["versusFetch","watchVersusFetch","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","logout","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","method","headers","response","status","json","jsonResult","normalized","versuses","completeFetchingVersus","entities","result","non_field_errors","failFetchingVersus","VERSUS_FETCHING_STARTED"],"mappings":";;uCAqBYA,W;wCAqCOC,gB;;AA1DnB,SACIC,IADJ,EAEIC,SAFJ,EAGIC,GAHJ,EAMIC,KANJ,EAOIC,MAPJ,QAQS,oBART;AAUA,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,OAAT;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,KAAKC,OAAZ;AACA,SAASC,MAAT;AAEE,IAAMC,YAAY,GAAIJ,OAAO,GAAG,QAAhC;;AAGA,SAAUV,WAAV,CAAsBe,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMX,GAAG,CAACS,MAAM,EAAP,CAAT;;AADJ;AAAA;AAAA;AAGqB,iBAAMP,MAAM,CAACC,SAAS,CAACS,eAAX,CAAZ;;AAHrB;AAGYC,UAAAA,MAHZ;;AAAA,eAKUA,MALV;AAAA;AAAA;AAAA;;AAAA;AAMsB,iBAAMX,MAAM,CAACC,SAAS,CAACW,YAAX,CAAZ;;AANtB;AAMcC,UAAAA,KANd;AAAA;AAOyB,iBAAMjB,IAAI,CACzBkB,KADyB,EAEtBN,YAFsB,oBAGzB;AACEO,YAAAA,MAAM,EAAE,KADV;AAEEC,YAAAA,OAAO,EAAC;AACN,8BAAgB,kBADV;AAEN,wCAAwBH;AAFlB;AAFV,WAHyB,CAAV;;AAPzB;AAOcI,UAAAA,QAPd;;AAAA,gBAkBYA,QAAQ,CAACC,MAAT,KAAoB,GAlBhC;AAAA;AAAA;AAAA;;AAAA;AAmB6B,iBAAMD,QAAQ,CAACE,IAAT,EAAN;;AAnB7B;AAmBgBC,UAAAA,UAnBhB;AAoBgBC,UAAAA,UApBhB,GAoB6BhB,SAAS,CAACe,UAAD,EAAad,OAAO,CAACgB,QAArB,CApBtC;AAAA;AAqBU,iBAAMxB,GAAG,CACTI,OAAO,CAACqB,sBAAR,CACIF,UAAU,CAACG,QAAX,CAAoBF,QADxB,EAEID,UAAU,CAACI,MAFf,CADS,CAAT;;AArBV;AAAA;AAAA;;AAAA;AAAA;AA4BuC,iBAAMR,QAAQ,CAACE,IAAT,EAAN;;AA5BvC;AAAA;AA4BkBO,UAAAA,gBA5BlB,wBA4BkBA,gBA5BlB;AAAA;AA6BU,iBAAM5B,GAAG,CAACI,OAAO,CAACyB,kBAAR,CAA2BD,gBAAgB,CAAC,CAAD,CAA3C,CAAD,CAAT;;AA7BV;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCA,OAAO,SAAU/B,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CACbM,KAAK,CAACyB,uBADO,EAEblC,WAFa,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/versus';\nimport * as types from '../types/versus';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/versus';\nimport { logout } from '../actions/auth';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  \n  function* versusFetch(action) {\n      yield put(logout())\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n    \n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/user/versus/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.versuses);\n            yield put(\n            actions.completeFetchingVersus(\n                normalized.entities.versuses,\n                normalized.result\n            ),\n            );\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failFetchingVersus(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        // yield put(actions.failLogin('Falló horrible la conexión mano'));\n      }\n  }\n  \n  export function* watchVersusFetch() {\n    yield takeEvery(\n      types.VERSUS_FETCHING_STARTED,\n      versusFetch,\n    );\n  }"]},"metadata":{},"sourceType":"module"}