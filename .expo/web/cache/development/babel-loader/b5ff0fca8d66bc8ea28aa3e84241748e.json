{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/thecoder/Documentos/votark/votark/src/components/Comments/index.js\";\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport * as selectors from \"../../reducers\";\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./styles\";\nimport { Actions } from 'react-native-router-flux';\nimport { startAddingComment, startFetchingComments } from \"../../actions/comment\";\nimport { v4 } from 'uuid';\n\nvar Comments = function Comments(_ref) {\n  var comments = _ref.comments,\n      send = _ref.send,\n      fetch = _ref.fetch;\n  useEffect(function () {\n    var interval = setInterval(fetch, 10000);\n    return function () {\n      clearInterval(interval);\n    };\n  }, []);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      comment = _useState2[0],\n      changeComment = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.comments,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, comments.map(function (comm) {\n    return React.createElement(Text, {\n      key: comm.id,\n      style: comm.isConfirmed ? styles.comment : styles.notConfirmed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, comm.isConfirmed ? comm.username + ' : ' + comm.content : comm.content);\n  })), React.createElement(View, {\n    style: styles.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    className: \"user\",\n    type: \"text\",\n    placeholder: \"Write a Comment...\",\n    value: comment,\n    onChangeText: changeComment,\n    onChange: function onChange(e) {\n      return changeComment(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.send,\n    type: \"submit\",\n    onPress: function onPress() {\n      return send(comment);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, ' Send ')));\n};\n\nexport default connect(function (state) {\n  return {\n    comments: selectors.getComments(state),\n    versusid: selectors.getVersus(state) ? selectors.getVersus(state).id : null\n  };\n}, function (dispatch) {\n  return {\n    send: function send(comment, versusid) {\n      dispatch(startAddingComment(comment, versusid, v4()));\n    },\n    fetch: function fetch() {\n      dispatch(startFetchingComments());\n    }\n  };\n}, function (stateToProps, dispatchToProps) {\n  return {\n    comments: stateToProps.comments,\n    send: function send(comment) {\n      if (stateToProps.versusid) {\n        dispatchToProps.send(comment, stateToProps.versusid);\n      }\n    },\n    fetch: function fetch() {\n      dispatchToProps.fetch();\n    }\n  };\n})(Comments);","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/components/Comments/index.js"],"names":["connect","selectors","React","useState","useEffect","styles","Actions","startAddingComment","startFetchingComments","v4","Comments","comments","send","fetch","interval","setInterval","clearInterval","comment","changeComment","container","map","comm","id","isConfirmed","notConfirmed","username","content","row","input","e","target","value","state","getComments","versusid","getVersus","dispatch","stateToProps","dispatchToProps"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport {Text, View, Image, TextInput, ScrollView } from 'react-native';\nimport * as selectors from '../../reducers'\nimport React, { useState, useEffect } from 'react';\nimport styles from './styles'\nimport { Actions } from 'react-native-router-flux';\nimport { startAddingComment, startFetchingComments } from '../../actions/comment';\nimport {v4} from 'uuid'\n\nconst Comments = ({comments,send,fetch}) => {\n    \n  useEffect(\n    () => {\n      const interval = setInterval(fetch, 10000);\n      return () => {\n        clearInterval(interval);\n      };\n    },\n    []\n  );\n\n  const [comment, changeComment] = useState('');\n  return (\n  <View style={styles.container}>\n      <ScrollView style={styles.comments}>\n        {\n          comments.map(comm =>\n            <Text key={comm.id} style={comm.isConfirmed?styles.comment:styles.notConfirmed} >{comm.isConfirmed?comm.username + ' : ' + comm.content:comm.content}</Text>\n            )\n        }\n      </ScrollView>\n      <View style={styles.row}>\n            <TextInput\n            style={styles.input}\n            className=\"user\"\n            type=\"text\"\n            placeholder=\"Write a Comment...\"\n            value={comment}   \n            onChangeText={changeComment}\n            onChange={e => changeComment(e.target.value)}\n            />\n            <Text style={styles.send} type=\"submit\" \n            onPress={() =>\n              send(comment)\n            }>{' Send '}</Text>\n      </View>\n</View>\n)};\n\nexport default connect(\n  state => ({\n    comments: selectors.getComments(state),\n    versusid: selectors.getVersus(state)?selectors.getVersus(state).id:null\n  }),\n  dispatch => ({\n    send(comment,versusid){\n      dispatch(startAddingComment(comment,versusid,v4()))\n    },\n    fetch(){\n      dispatch(startFetchingComments())\n    }\n  }),\n  (stateToProps, dispatchToProps) => ({\n    comments: stateToProps.comments,\n    send(comment){\n      if(stateToProps.versusid){\n        dispatchToProps.send(comment,stateToProps.versusid)\n      }\n    },\n    fetch(){\n      dispatchToProps.fetch()\n    }\n  })\n)(Comments);\n"]},"metadata":{},"sourceType":"module"}