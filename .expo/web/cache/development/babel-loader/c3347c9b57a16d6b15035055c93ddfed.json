{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nfunction createPreloader(list) {\n  var urls = _.clone(list);\n\n  return {\n    next: function next() {\n      return urls.shift();\n    }\n  };\n}\n\nfunction runPreloadTask(prefetcher, imageCacheManager) {\n  var url = prefetcher.next();\n\n  if (!url) {\n    return Promise.resolve();\n  }\n\n  return imageCacheManager.downloadAndCacheUrl(url).catch(_.noop).then(function () {\n    return runPreloadTask(prefetcher, imageCacheManager);\n  });\n}\n\nmodule.exports = {\n  preloadImages: function preloadImages(urls, imageCacheManager, numberOfConcurrentPreloads) {\n    var preloader = createPreloader(urls);\n    var numberOfWorkers = numberOfConcurrentPreloads > 0 ? numberOfConcurrentPreloads : urls.length;\n\n    var promises = _.times(numberOfWorkers, function () {\n      return runPreloadTask(preloader, imageCacheManager);\n    });\n\n    return Promise.all(promises);\n  }\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-cached-image/ImageCachePreloader.js"],"names":["_","require","createPreloader","list","urls","clone","next","shift","runPreloadTask","prefetcher","imageCacheManager","url","Promise","resolve","downloadAndCacheUrl","catch","noop","then","module","exports","preloadImages","numberOfConcurrentPreloads","preloader","numberOfWorkers","length","promises","times","all"],"mappings":"AAAA;;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B,MAAMC,IAAI,GAAGJ,CAAC,CAACK,KAAF,CAAQF,IAAR,CAAb;;AACA,SAAO;AACHG,IAAAA,IADG,kBACI;AACH,aAAOF,IAAI,CAACG,KAAL,EAAP;AACH;AAHE,GAAP;AAKH;;AAED,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,iBAApC,EAAuD;AACnD,MAAMC,GAAG,GAAGF,UAAU,CAACH,IAAX,EAAZ;;AACA,MAAI,CAACK,GAAL,EAAU;AACN,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AAED,SAAOH,iBAAiB,CAACI,mBAAlB,CAAsCH,GAAtC,EAEFI,KAFE,CAEIf,CAAC,CAACgB,IAFN,EAOFC,IAPE,CAOG;AAAA,WAAMT,cAAc,CAACC,UAAD,EAAaC,iBAAb,CAApB;AAAA,GAPH,CAAP;AAQH;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AASbC,EAAAA,aATa,yBASChB,IATD,EASOM,iBATP,EAS0BW,0BAT1B,EASsD;AAC/D,QAAMC,SAAS,GAAGpB,eAAe,CAACE,IAAD,CAAjC;AACA,QAAMmB,eAAe,GAAGF,0BAA0B,GAAG,CAA7B,GAAiCA,0BAAjC,GAA8DjB,IAAI,CAACoB,MAA3F;;AACA,QAAMC,QAAQ,GAAGzB,CAAC,CAAC0B,KAAF,CAAQH,eAAR,EAAyB;AAAA,aACtCf,cAAc,CAACc,SAAD,EAAYZ,iBAAZ,CADwB;AAAA,KAAzB,CAAjB;;AAGA,WAAOE,OAAO,CAACe,GAAR,CAAYF,QAAZ,CAAP;AACH;AAhBY,CAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nfunction createPreloader(list) {\n    const urls = _.clone(list);\n    return {\n        next() {\n            return urls.shift();\n        }\n    };\n}\n\nfunction runPreloadTask(prefetcher, imageCacheManager) {\n    const url = prefetcher.next();\n    if (!url) {\n        return Promise.resolve();\n    }\n    // console.log('START', url);\n    return imageCacheManager.downloadAndCacheUrl(url)\n        // allow prefetch task to fail without terminating other prefetch tasks\n        .catch(_.noop)\n        // .then(() => {\n        //     console.log('END', url);\n        // })\n        // then run next task\n        .then(() => runPreloadTask(prefetcher, imageCacheManager));\n}\n\nmodule.exports = {\n\n    /**\n     * download and cache an list of urls\n     * @param urls\n     * @param imageCacheManager\n     * @param numberOfConcurrentPreloads\n     * @returns {Promise}\n     */\n    preloadImages(urls, imageCacheManager, numberOfConcurrentPreloads) {\n        const preloader = createPreloader(urls);\n        const numberOfWorkers = numberOfConcurrentPreloads > 0 ? numberOfConcurrentPreloads : urls.length;\n        const promises = _.times(numberOfWorkers, () =>\n            runPreloadTask(preloader, imageCacheManager)\n        );\n        return Promise.all(promises);\n    },\n\n};\n"]},"metadata":{},"sourceType":"script"}