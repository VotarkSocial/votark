{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width,\n    SCREEN_HEIGHT = _Dimensions$get.height;\n\nvar scale = SCREEN_WIDTH / 320;\nexport function normalize(size) {\n  var newSize = size * 4 * scale;\n\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize) + Math.pow(newSize, 1 / 2))) * 2 + 20;\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize) + Math.pow(newSize, 1 / 2))) * 2;\n  }\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/utils/normalize.js"],"names":["Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","scale","normalize","size","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel","log","pow"],"mappings":";;;;sBAKIA,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAFKC,Y,mBAAPC,K;IACQC,a,mBAARC,M;;AAIF,IAAMC,KAAK,GAAGJ,YAAY,GAAG,GAA7B;AAEA,OAAO,SAASK,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,MAAMC,OAAO,GAAGD,IAAI,GAAG,CAAP,GAASF,KAAzB;;AACA,MAAII,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BH,IAAI,CAACI,GAAL,CAASP,OAAT,IAAkBG,IAAI,CAACK,GAAL,CAASR,OAAT,EAAkB,IAAE,CAApB,CAAjD,CAAX,IAAsF,CAAtF,GAA2F,EAAlG;AACD,GAFD,MAEO;AACL,WAAOG,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BH,IAAI,CAACI,GAAL,CAASP,OAAT,IAAkBG,IAAI,CAACK,GAAL,CAASR,OAAT,EAAkB,IAAE,CAApB,CAAjD,CAAX,IAAsF,CAA7F;AACD;AACF","sourcesContent":["import { Dimensions, Platform, PixelRatio } from 'react-native';\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\n// based on iphone 5s's scale\nconst scale = SCREEN_WIDTH / 320;\n\nexport function normalize(size) {\n  const newSize = size * 4*scale\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,(1/2))))*2 +  20\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,(1/2))))*2\n  }\n}"]},"metadata":{},"sourceType":"module"}