{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\n\nfunction previewDocument(path, scheme) {\n  if (Platform.OS === 'ios') return RNFetchBlob.previewDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.openDocument only supports IOS.');\n}\n\nfunction openDocument(path, scheme) {\n  if (Platform.OS === 'ios') return RNFetchBlob.openDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.previewDocument only supports IOS.');\n}\n\nfunction excludeFromBackupKey(url) {\n  return RNFetchBlob.excludeFromBackupKey('file://' + path);\n}\n\nexport default {\n  openDocument: openDocument,\n  previewDocument: previewDocument,\n  excludeFromBackupKey: excludeFromBackupKey\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/ios.js"],"names":["NativeAppEventEmitter","RNFetchBlob","NativeModules","previewDocument","path","scheme","Platform","OS","Promise","reject","openDocument","excludeFromBackupKey","url"],"mappings":";;;SAQEA,qB;AAGF,IAAMC,WAA6B,GAAGC,aAAa,CAACD,WAApD;;AAQA,SAASE,eAAT,CAAyBC,IAAzB,EAAsCC,MAAtC,EAAqD;AACnD,MAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAnB,EACE,OAAON,WAAW,CAACE,eAAZ,CAA4B,YAAYC,IAAxC,EAA8CC,MAA9C,CAAP,CADF,KAGE,OAAOG,OAAO,CAACC,MAAR,CAAe,6CAAf,CAAP;AACH;;AAQD,SAASC,YAAT,CAAsBN,IAAtB,EAAmCC,MAAnC,EAAkD;AAChD,MAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAnB,EACE,OAAON,WAAW,CAACS,YAAZ,CAAyB,YAAYN,IAArC,EAA2CC,MAA3C,CAAP,CADF,KAGE,OAAOG,OAAO,CAACC,MAAR,CAAe,gDAAf,CAAP;AACH;;AAQD,SAASE,oBAAT,CAA8BC,GAA9B,EAA0C;AACxC,SAAOX,WAAW,CAACU,oBAAZ,CAAiC,YAAYP,IAA7C,CAAP;AACD;;AAED,eAAe;AACbM,EAAAA,YAAY,EAAZA,YADa;AAEbP,EAAAA,eAAe,EAAfA,eAFa;AAGbQ,EAAAA,oBAAoB,EAApBA;AAHa,CAAf","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  Platform,\n  NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob:RNFetchBlobNative = NativeModules.RNFetchBlob\n\n/**\n * Open a file using UIDocumentInteractionController\n * @param  {string]} path Path of the file to be open.\n * @param  {string} scheme URI scheme that needs to support, optional\n * @return {Promise}\n */\nfunction previewDocument(path:string, scheme:string) {\n  if(Platform.OS === 'ios')\n    return RNFetchBlob.previewDocument('file://' + path, scheme)\n  else\n    return Promise.reject('RNFetchBlob.openDocument only supports IOS.')\n}\n\n/**\n * Preview a file using UIDocumentInteractionController\n * @param  {string]} path Path of the file to be open.\n * @param  {string} scheme URI scheme that needs to support, optional\n * @return {Promise}\n */\nfunction openDocument(path:string, scheme:string) {\n  if(Platform.OS === 'ios')\n    return RNFetchBlob.openDocument('file://' + path, scheme)\n  else\n    return Promise.reject('RNFetchBlob.previewDocument only supports IOS.')\n}\n\n/**\n * Set excludeFromBackupKey to a URL to prevent the resource to be backuped to\n * iCloud.\n * @param  {string} url URL of the resource, only file URL is supported\n * @return {Promise}\n */\nfunction excludeFromBackupKey(url:string) {\n  return RNFetchBlob.excludeFromBackupKey('file://' + path);\n}\n\nexport default {\n  openDocument,\n  previewDocument,\n  excludeFromBackupKey\n}\n"]},"metadata":{},"sourceType":"module"}