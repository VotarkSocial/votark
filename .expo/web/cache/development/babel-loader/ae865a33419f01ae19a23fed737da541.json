{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(messageFetch),\n    _marked2 = _regeneratorRuntime.mark(watchmessageFetch),\n    _marked3 = _regeneratorRuntime.mark(addmessage),\n    _marked4 = _regeneratorRuntime.mark(watchmessageAddition);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/message\";\nimport * as types from \"../types/messages\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/message\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction messageFetch(action) {\n  var isAuth, chat, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function messageFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n          _context.next = 6;\n          return select(selectors.getChatSelectedWithProps);\n\n        case 6:\n          chat = _context.sent;\n          console.log(chat);\n\n          if (!(isAuth && chat.id)) {\n            _context.next = 30;\n            break;\n          }\n\n          _context.next = 11;\n          return select(selectors.getAuthToken);\n\n        case 11:\n          token = _context.sent;\n          _context.next = 14;\n          return call(fetch, API_BASE_URL + \"/chat/\" + chat.id + \"/messages/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 14:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 24;\n            break;\n          }\n\n          _context.next = 18;\n          return response.json();\n\n        case 18:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.messages);\n          _context.next = 22;\n          return put(actions.completeFetchingMessages(normalized.entities.messages, normalized.result));\n\n        case 22:\n          _context.next = 30;\n          break;\n\n        case 24:\n          _context.next = 26;\n          return response.json();\n\n        case 26:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 30;\n          return put(actions.failFetchingMessages(non_field_errors[0]));\n\n        case 30:\n          _context.next = 36;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 36;\n          return put(actions.failFetchingMessages('CONNECTION FAILED'));\n\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 32]]);\n}\n\nexport function watchmessageFetch() {\n  return _regeneratorRuntime.wrap(function watchmessageFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.MESSAGES_FETCHING_STARTED, messageFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addmessage(action) {\n  var isAuth, userid, chatid, token, response, message;\n  return _regeneratorRuntime.wrap(function addmessage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context3.sent;\n          _context3.next = 6;\n          return select(selectors.getAuthUserID);\n\n        case 6:\n          userid = _context3.sent;\n          _context3.next = 9;\n          return select(selectors.getChatSelected);\n\n        case 9:\n          chatid = _context3.sent;\n\n          if (!(isAuth && chatid && userid)) {\n            _context3.next = 25;\n            break;\n          }\n\n          _context3.next = 13;\n          return select(selectors.getAuthToken);\n\n        case 13:\n          token = _context3.sent;\n          _context3.next = 16;\n          return call(fetch, API_BASE_URL + \"/message/\", {\n            method: 'POST',\n            body: JSON.stringify(_objectSpread(_objectSpread({}, action.payload), {}, {\n              chat: chatid,\n              user: userid\n            })),\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 16:\n          response = _context3.sent;\n\n          if (!(response.status === 201)) {\n            _context3.next = 25;\n            break;\n          }\n\n          _context3.next = 20;\n          return response.json();\n\n        case 20:\n          message = _context3.sent;\n          _context3.next = 23;\n          return put(actions.completeAddingmessage(action.payload.id, message));\n\n        case 23:\n          _context3.next = 25;\n          break;\n\n        case 25:\n          _context3.next = 29;\n          break;\n\n        case 27:\n          _context3.prev = 27;\n          _context3.t0 = _context3[\"catch\"](0);\n\n        case 29:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 27]]);\n}\n\nexport function watchmessageAddition() {\n  return _regeneratorRuntime.wrap(function watchmessageAddition$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(types.MESSAGE_ADDITION_STARTED, addmessage);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/messages.js"],"names":["messageFetch","watchmessageFetch","addmessage","watchmessageAddition","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","API_BASE_URL","action","isAuthenticated","isAuth","getChatSelectedWithProps","chat","console","log","id","getAuthToken","token","fetch","method","headers","response","status","json","jsonResult","normalized","messages","completeFetchingMessages","entities","result","non_field_errors","failFetchingMessages","MESSAGES_FETCHING_STARTED","getAuthUserID","userid","getChatSelected","chatid","body","JSON","stringify","payload","user","message","completeAddingmessage","MESSAGE_ADDITION_STARTED"],"mappings":"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","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/message';\nimport * as types from '../types/messages';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/message';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  \n  function* messageFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        const chat = yield select(selectors.getChatSelectedWithProps);\n        console.log(chat)\n        if (isAuth && chat.id) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/chat/${chat.id}/messages/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.messages);\n            yield put(\n            actions.completeFetchingMessages(\n                normalized.entities.messages,\n                normalized.result\n            ),\n            );\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failFetchingMessages(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failFetchingMessages('CONNECTION FAILED'));\n      }\n  }\n  \n  export function* watchmessageFetch() {\n    yield takeEvery(\n      types.MESSAGES_FETCHING_STARTED,\n      messageFetch,\n    );\n  }\n\nfunction* addmessage(action) {\n    try {\n      const isAuth = yield select(selectors.isAuthenticated);   \n      const userid = yield select(selectors.getAuthUserID);\n      const chatid = yield select(selectors.getChatSelected);\n      if (isAuth && chatid && userid) {\n        const token = yield select(selectors.getAuthToken);\n        const response = yield call(\n          fetch,\n          `${API_BASE_URL}/message/`,\n          {\n            method: 'POST',\n            body: JSON.stringify({...action.payload,chat:chatid,user:userid}),\n            headers:{\n              'Content-Type': 'application/json',\n              'Authorization': `JWT ${token}`,\n            },\n          }\n        );\n  \n        if (response.status === 201) {\n          const message = yield response.json();\n          yield put(\n            actions.completeAddingmessage(\n              action.payload.id,\n              message,\n            ),\n          );\n        } else {\n          // const { non_field_errors } = yield response.json();\n          // yield put(actions.failLogin(non_field_errors[0]));\n        }\n      }\n    } catch (error) {\n      // yield put(actions.failLogin(''));\n    }\n  }\n\n  export function* watchmessageAddition() {\n    yield takeEvery(\n      types.MESSAGE_ADDITION_STARTED,\n      addmessage,\n    );\n  }"]},"metadata":{},"sourceType":"module"}