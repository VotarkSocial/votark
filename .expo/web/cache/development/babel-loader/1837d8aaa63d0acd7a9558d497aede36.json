{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(topicFetch),\n    _marked2 = _regeneratorRuntime.mark(watchTopicFetch);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/topic\";\nimport * as types from \"../types/topic\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/topic\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction topicFetch(action) {\n  var isAuth, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function topicFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 29;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return call(fetch, API_BASE_URL + \"/topic/trending/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 23;\n            break;\n          }\n\n          _context.next = 14;\n          return response.json();\n\n        case 14:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.topics);\n          _context.next = 18;\n          return put(actions.completeFetchTopic(normalized.entities.topics, normalized.result));\n\n        case 18:\n          if (!(normalize.result.length !== 0)) {\n            _context.next = 21;\n            break;\n          }\n\n          _context.next = 21;\n          return put(actions.selectTopic(normalize.result[0]));\n\n        case 21:\n          _context.next = 29;\n          break;\n\n        case 23:\n          _context.next = 25;\n          return response.json();\n\n        case 25:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 29;\n          return put(actions.failFetchTopic(non_field_errors[0]));\n\n        case 29:\n          _context.next = 35;\n          break;\n\n        case 31:\n          _context.prev = 31;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 35;\n          return put(actions.failFetchTopic('CONNECTION FAILED'));\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 31]]);\n}\n\nexport function watchTopicFetch() {\n  return _regeneratorRuntime.wrap(function watchTopicFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.TOPIC_FETCH_STARTED, topicFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/topic.js"],"names":["topicFetch","watchTopicFetch","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","method","headers","response","status","json","jsonResult","normalized","topics","completeFetchTopic","entities","result","length","selectTopic","non_field_errors","failFetchTopic","TOPIC_FETCH_STARTED"],"mappings":";;uCAmBYA,U;wCAsCOC,e;;AAzDnB,SACIC,IADJ,EAEIC,SAFJ,EAGIC,GAHJ,EAMIC,KANJ,EAOIC,MAPJ,QAQS,oBART;AAUA,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,OAAT;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,KAAKC,OAAZ;AAEE,IAAMC,YAAY,GAAIH,OAAO,GAAG,QAAhC;;AAEA,SAAUV,UAAV,CAAqBc,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAMR,MAAM,CAACC,SAAS,CAACQ,eAAX,CAAZ;;AAFrB;AAEYC,UAAAA,MAFZ;;AAAA,eAGUA,MAHV;AAAA;AAAA;AAAA;;AAAA;AAIsB,iBAAMV,MAAM,CAACC,SAAS,CAACU,YAAX,CAAZ;;AAJtB;AAIcC,UAAAA,KAJd;AAAA;AAKyB,iBAAMhB,IAAI,CACzBiB,KADyB,EAEtBN,YAFsB,uBAGzB;AACEO,YAAAA,MAAM,EAAE,KADV;AAEEC,YAAAA,OAAO,EAAC;AACN,8BAAgB,kBADV;AAEN,wCAAwBH;AAFlB;AAFV,WAHyB,CAAV;;AALzB;AAKcI,UAAAA,QALd;;AAAA,gBAgBYA,QAAQ,CAACC,MAAT,KAAoB,GAhBhC;AAAA;AAAA;AAAA;;AAAA;AAiB6B,iBAAMD,QAAQ,CAACE,IAAT,EAAN;;AAjB7B;AAiBgBC,UAAAA,UAjBhB;AAkBgBC,UAAAA,UAlBhB,GAkB6Bf,SAAS,CAACc,UAAD,EAAab,OAAO,CAACe,MAArB,CAlBtC;AAAA;AAmBU,iBAAMvB,GAAG,CACTI,OAAO,CAACoB,kBAAR,CACIF,UAAU,CAACG,QAAX,CAAoBF,MADxB,EAEID,UAAU,CAACI,MAFf,CADS,CAAT;;AAnBV;AAAA,gBAyBanB,SAAS,CAACmB,MAAV,CAAiBC,MAAjB,KAA0B,CAzBvC;AAAA;AAAA;AAAA;;AAAA;AA0BY,iBAAM3B,GAAG,CAACI,OAAO,CAACwB,WAAR,CAAoBrB,SAAS,CAACmB,MAAV,CAAiB,CAAjB,CAApB,CAAD,CAAT;;AA1BZ;AAAA;AAAA;;AAAA;AAAA;AA6BuC,iBAAMR,QAAQ,CAACE,IAAT,EAAN;;AA7BvC;AAAA;AA6BkBS,UAAAA,gBA7BlB,wBA6BkBA,gBA7BlB;AAAA;AA8BU,iBAAM7B,GAAG,CAACI,OAAO,CAAC0B,cAAR,CAAuBD,gBAAgB,CAAC,CAAD,CAAvC,CAAD,CAAT;;AA9BV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkCM,iBAAM7B,GAAG,CAACI,OAAO,CAAC0B,cAAR,CAAuB,mBAAvB,CAAD,CAAT;;AAlCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsCA,OAAO,SAAUjC,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CACbM,KAAK,CAAC0B,mBADO,EAEbnC,UAFa,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/topic';\nimport * as types from '../types/topic';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/topic';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  function* topicFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/topic/trending/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.topics);\n            yield put(\n            actions.completeFetchTopic(\n                normalized.entities.topics,\n                normalized.result\n            ),\n            );\n            if(normalize.result.length!==0){  \n              yield put(actions.selectTopic(normalize.result[0]))\n            }\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failFetchTopic(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failFetchTopic('CONNECTION FAILED'));\n      }\n  }\n  \n  export function* watchTopicFetch() {\n    yield takeEvery(\n      types.TOPIC_FETCH_STARTED,\n      topicFetch,\n    );\n  }"]},"metadata":{},"sourceType":"module"}