{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { NavigationStateContext } from \"./BaseNavigationContainer\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n      route = _ref.route,\n      navigation = _ref.navigation,\n      getState = _ref.getState,\n      setState = _ref.setState;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var context = React.useMemo(function () {\n    return {\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey\n    };\n  }, [getCurrentState, getKey, route.state, setCurrentState, setKey]);\n  return React.createElement(NavigationContext.Provider, {\n    value: navigation\n  }, React.createElement(NavigationRouteContext.Provider, {\n    value: route\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: screen.component || screen.children,\n    navigation: navigation,\n    route: route\n  }, 'component' in screen && screen.component !== undefined ? React.createElement(screen.component, {\n    navigation: navigation,\n    route: route\n  }) : 'children' in screen && screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)))));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["setState","navigatorKeyRef","React","getKey","setKey","key","getCurrentState","state","getState","currentRoute","r","route","setCurrentState","child","routes","context","navigation","screen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n    }),\n    [getCurrentState, getKey, route.state, setCurrentState, setKey]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}