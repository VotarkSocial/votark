{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\nimport * as types from \"../types/chat\";\n\nvar byId = function byId() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.CHATS_FETCHING_COMPLETED:\n      {\n        var _action$payload = action.payload,\n            entities = _action$payload.entities,\n            _order = _action$payload.order;\n\n        var newState = _objectSpread({}, state);\n\n        _order.forEach(function (id) {\n          newState[id] = _objectSpread(_objectSpread({}, entities[id]), {}, {\n            isConfirmed: true\n          });\n        });\n\n        return newState;\n      }\n\n    case types.CHAT_ADDITION_STARTED:\n      {\n        var _newState = _objectSpread({}, state);\n\n        _newState[action.payload.id] = _objectSpread(_objectSpread({}, action.payload), {}, {\n          isConfirmed: false\n        });\n        return _newState;\n      }\n\n    case types.CHAT_ADDITION_COMPLETED:\n      {\n        var _action$payload2 = action.payload,\n            oldId = _action$payload2.oldId,\n            Chat = _action$payload2.Chat;\n\n        var _newState2 = omit(state, oldId);\n\n        _newState2[Chat.id] = _objectSpread(_objectSpread({}, Chat), {}, {\n          isConfirmed: true\n        });\n        return _newState2;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar order = function order() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.CHATS_FETCHING_COMPLETED:\n      {\n        return action.payload.order;\n      }\n\n    case types.CHAT_ADDITION_STARTED:\n      {\n        return [].concat(_toConsumableArray(state), [action.payload.id]);\n      }\n\n    case types.CHAT_ADDITION_COMPLETED:\n      {\n        var _action$payload3 = action.payload,\n            oldId = _action$payload3.oldId,\n            comment = _action$payload3.comment;\n        return state.map(function (id) {\n          return id === oldId ? comment.id : id;\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isFetching = function isFetching() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.CHATS_FETCHING_STARTED:\n      {\n        return true;\n      }\n\n    case types.CHATS_FETCHING_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.CHATS_FETCHING_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar error = function error() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.CHATS_FETCHING_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.CHATS_FETCHING_STARTED:\n      {\n        return null;\n      }\n\n    case types.CHATS_FETCHING_COMPLETED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isAddingUser = function isAddingUser() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.USER_ADDITION_STARTED:\n      {\n        return true;\n      }\n\n    case types.USER_ADDITION_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.USER_ADDITION_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar errorUser_Chat = function errorUser_Chat() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.USER_ADDITION_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.USER_ADDITION_COMPLETED:\n      {\n        return null;\n      }\n\n    case types.USER_ADDITION_STARTED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isAddingAdmin = function isAddingAdmin() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.ADMIN_ADDITION_STARTED:\n      {\n        return true;\n      }\n\n    case types.ADMIN_ADDITION_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.ADMIN_ADDITION_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar errorAdmin = function errorAdmin() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.ADMIN_ADDITION_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.ADMIN_ADDITION_STARTED:\n      {\n        return null;\n      }\n\n    case types.ADMIN_ADDITION_COMPLETED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar chatSelected = function chatSelected() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.CHAT_SELECTED:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  byId: byId,\n  order: order,\n  isFetching: isFetching,\n  error: error,\n  isAddingAdmin: isAddingAdmin,\n  isAddingUser: isAddingUser,\n  errorUser_Chat: errorUser_Chat,\n  errorAdmin: errorAdmin,\n  chatSelected: chatSelected\n});\nexport var getChat = function getChat(state, id) {\n  console.log(state.byId);\n  return state.byId[id];\n};\nexport var getChats = function getChats(state) {\n  return state.order.map(function (id) {\n    return getChat(state, id);\n  });\n};\nexport var getisFetchingChat = function getisFetchingChat(state) {\n  return state.isFetching;\n};\nexport var getErrorChat = function getErrorChat(state) {\n  return state.error;\n};\nexport var getIsAddingAdmin = function getIsAddingAdmin(state) {\n  return state.isAddingAdmin;\n};\nexport var getIsAddingUser = function getIsAddingUser(state) {\n  return state.isAddingUser;\n};\nexport var getErrorUserChat = function getErrorUserChat(state) {\n  return state.errorUser_Chat;\n};\nexport var getErrorAdmin = function getErrorAdmin(state) {\n  return state.errorAdmin;\n};\nexport var getChatSelected = function getChatSelected(state) {\n  return state.chatSelected;\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/reducers/chat.js"],"names":["omit","combineReducers","types","byId","state","action","type","CHATS_FETCHING_COMPLETED","payload","entities","order","newState","forEach","id","isConfirmed","CHAT_ADDITION_STARTED","CHAT_ADDITION_COMPLETED","oldId","Chat","comment","map","isFetching","CHATS_FETCHING_STARTED","CHATS_FETCHING_FAILED","error","isAddingUser","USER_ADDITION_STARTED","USER_ADDITION_COMPLETED","USER_ADDITION_FAILED","errorUser_Chat","isAddingAdmin","ADMIN_ADDITION_STARTED","ADMIN_ADDITION_COMPLETED","ADMIN_ADDITION_FAILED","errorAdmin","chatSelected","CHAT_SELECTED","getChat","console","log","getChats","getisFetchingChat","getErrorChat","getIsAddingAdmin","getIsAddingUser","getErrorUserChat","getErrorAdmin","getChatSelected"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\n\nimport * as types from '../types/chat';\n\n\nconst byId = (state = {}, action) => {\n  switch(action.type) {\n    case types.CHATS_FETCHING_COMPLETED: {\n      const { entities, order } = action.payload;\n      const newState = { ...state };\n      order.forEach(id => {\n        newState[id] = {\n          ...entities[id],\n          isConfirmed: true,\n        };\n      });\n\n      return newState;\n    }\n    case types.CHAT_ADDITION_STARTED: {\n      const newState = { ...state };\n      newState[action.payload.id] = {\n        ...action.payload,\n        isConfirmed: false,\n      };\n      return newState;\n    }\n    case types.CHAT_ADDITION_COMPLETED: {\n      const { oldId, Chat } = action.payload;\n      const newState = omit(state, oldId);\n      newState[Chat.id] = {\n        ...Chat,\n        isConfirmed: true,\n      };\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst order = (state = [], action) => {\n  switch(action.type) {\n    case types.CHATS_FETCHING_COMPLETED: {\n      return action.payload.order;\n    }\n    case types.CHAT_ADDITION_STARTED: {\n      return [...state, action.payload.id];\n    }\n    case types.CHAT_ADDITION_COMPLETED: {\n      const { oldId, comment } = action.payload;\n      return state.map(id => id === oldId ? comment.id : id);\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst isFetching = (state = false, action) => {\n  switch(action.type) {\n    case types.CHATS_FETCHING_STARTED: {\n      return true;\n    }\n    case types.CHATS_FETCHING_COMPLETED: {\n      return false;\n    }\n    case types.CHATS_FETCHING_FAILED: {\n      return false;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst error = (state = null, action) => {\n  switch(action.type) {\n    case types.CHATS_FETCHING_FAILED: {\n      return action.payload.error;\n    }\n    case types.CHATS_FETCHING_STARTED: {\n      return null;\n    }\n    case types.CHATS_FETCHING_COMPLETED: {\n      return null;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n\nconst isAddingUser = (state = false, action) => {\n    switch(action.type) {\n      case types.USER_ADDITION_STARTED: {\n        return true;\n      }\n      case types.USER_ADDITION_COMPLETED: {\n        return false;\n      }\n      case types.USER_ADDITION_FAILED: {\n        return false;\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n  \n  const errorUser_Chat = (state = null, action) => {\n    switch(action.type) {\n      case types.USER_ADDITION_FAILED: {\n        return action.payload.error;\n      }\n      case types.USER_ADDITION_COMPLETED: {\n        return null;\n      }\n      case types.USER_ADDITION_STARTED: {\n        return null;\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\n\n  const isAddingAdmin = (state = false, action) => {\n    switch(action.type) {\n      case types.ADMIN_ADDITION_STARTED: {\n        return true;\n      }\n      case types.ADMIN_ADDITION_COMPLETED: {\n        return false;\n      }\n      case types.ADMIN_ADDITION_FAILED: {\n        return false;\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n  \n  const errorAdmin = (state = null, action) => {\n    switch(action.type) {\n      case types.ADMIN_ADDITION_FAILED: {\n        return action.payload.error;\n      }\n      case types.ADMIN_ADDITION_STARTED: {\n        return null;\n      }\n      case types.ADMIN_ADDITION_COMPLETED: {\n        return null;\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\n  const chatSelected = (state=null,action) => {\n    switch (action.type) {\n      case types.CHAT_SELECTED:\n          return action.payload;\n      default:\n        return state;\n    }\n  }\n\nexport default combineReducers({\n  byId,\n  order,\n  isFetching,\n  error,\n  isAddingAdmin,\n  isAddingUser,\n  errorUser_Chat,\n  errorAdmin,\n  chatSelected,\n});\n\nexport const getChat = (state, id) => {console.log(state.byId); return state.byId[id]};\nexport const getChats = state => state.order.map(id => getChat(state, id));\nexport const getisFetchingChat = state => state.isFetching;\nexport const getErrorChat = state => state.error;\nexport const getIsAddingAdmin = state => state.isAddingAdmin;\nexport const getIsAddingUser = state => state.isAddingUser;\nexport const getErrorUserChat = state => state.errorUser_Chat;\nexport const getErrorAdmin = state => state.errorAdmin;\nexport const getChatSelected = state => state.chatSelected;"]},"metadata":{},"sourceType":"module"}