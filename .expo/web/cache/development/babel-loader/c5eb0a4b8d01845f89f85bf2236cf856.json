{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(addingPost),\n    _marked2 = _regeneratorRuntime.mark(watchAddingPost),\n    _marked3 = _regeneratorRuntime.mark(pictureSetted),\n    _marked4 = _regeneratorRuntime.mark(watchPictureSetted);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/newPost\";\nimport * as types from \"../types/post\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction addingPost(action) {\n  var isAuth, token, response, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function addingPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return call(fetch, API_BASE_URL + \"/post/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context.sent;\n\n          if (!(response.status === 201)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 14;\n          return put(actions.completeAddingPost());\n\n        case 14:\n          _context.next = 22;\n          break;\n\n        case 16:\n          _context.next = 18;\n          return response.json();\n\n        case 18:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 22;\n          return put(actions.failAddingPost(non_field_errors[0]));\n\n        case 22:\n          _context.next = 28;\n          break;\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 28;\n          return put(actions.failAddingPost('CONNECTION FAILED'));\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 24]]);\n}\n\nexport function watchAddingPost() {\n  return _regeneratorRuntime.wrap(function watchAddingPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.POST_ADDED_STARTED, addingPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction pictureSetted(action) {\n  return _regeneratorRuntime.wrap(function pictureSetted$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(typeof document !== 'undefined')) {\n            _context3.next = 5;\n            break;\n          }\n\n          _context3.next = 3;\n          return window.location.href = URL + 'post/';\n\n        case 3:\n          _context3.next = 7;\n          break;\n\n        case 5:\n          _context3.next = 7;\n          return Actions.replace('Post');\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport function watchPictureSetted() {\n  return _regeneratorRuntime.wrap(function watchPictureSetted$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(types.PICTURE_SETTED, pictureSetted);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/newPost.js"],"names":["addingPost","watchAddingPost","pictureSetted","watchPictureSetted","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","method","headers","response","status","completeAddingPost","json","non_field_errors","failAddingPost","POST_ADDED_STARTED","document","window","location","href","URL","Actions","replace","PICTURE_SETTED"],"mappings":";;uCAkBYA,U;wCA4BOC,e;wCAOPC,a;wCASOC,kB;;AA9DnB,SACIC,IADJ,EAEIC,SAFJ,EAGIC,GAHJ,EAMIC,KANJ,EAOIC,MAPJ,QAQS,oBART;AAUA,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,OAAT;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEE,IAAMC,YAAY,GAAIF,OAAO,GAAG,QAAhC;;AAEA,SAAUZ,UAAV,CAAqBe,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAMP,MAAM,CAACC,SAAS,CAACO,eAAX,CAAZ;;AAFrB;AAEYC,UAAAA,MAFZ;;AAAA,eAGUA,MAHV;AAAA;AAAA;AAAA;;AAAA;AAIsB,iBAAMT,MAAM,CAACC,SAAS,CAACS,YAAX,CAAZ;;AAJtB;AAIcC,UAAAA,KAJd;AAAA;AAKyB,iBAAMf,IAAI,CACzBgB,KADyB,EAEtBN,YAFsB,aAGzB;AACEO,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,OAAO,EAAC;AACN,8BAAgB,kBADV;AAEN,wCAAwBH;AAFlB;AAFV,WAHyB,CAAV;;AALzB;AAKcI,UAAAA,QALd;;AAAA,gBAgBYA,QAAQ,CAACC,MAAT,KAAoB,GAhBhC;AAAA;AAAA;AAAA;;AAAA;AAiBU,iBAAMlB,GAAG,CAACI,OAAO,CAACe,kBAAR,EAAD,CAAT;;AAjBV;AAAA;AAAA;;AAAA;AAAA;AAmBuC,iBAAMF,QAAQ,CAACG,IAAT,EAAN;;AAnBvC;AAAA;AAmBkBC,UAAAA,gBAnBlB,wBAmBkBA,gBAnBlB;AAAA;AAoBU,iBAAMrB,GAAG,CAACI,OAAO,CAACkB,cAAR,CAAuBD,gBAAgB,CAAC,CAAD,CAAvC,CAAD,CAAT;;AApBV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAwBM,iBAAMrB,GAAG,CAACI,OAAO,CAACkB,cAAR,CAAuB,mBAAvB,CAAD,CAAT;;AAxBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4BA,OAAO,SAAU3B,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,SAAS,CACbM,KAAK,CAACkB,kBADO,EAEb7B,UAFa,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOP,SAAUE,aAAV,CAAwBa,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBACK,OAAOe,QAAP,KAAoB,WADzB;AAAA;AAAA;AAAA;;AAAA;AAEM,iBAAMC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBC,GAAG,GAAC,OAAjC;;AAFN;AAAA;AAAA;;AAAA;AAAA;AAKM,iBAAMC,OAAO,CAACC,OAAR,CAAgB,MAAhB,CAAN;;AALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,OAAO,SAAUjC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CACbM,KAAK,CAAC0B,cADO,EAEbnC,aAFa,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/newPost';\nimport * as types from '../types/post';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  function* addingPost(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/post/`,\n            {\n              method: 'POST',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 201) {\n            yield put(actions.completeAddingPost())\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failAddingPost(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failAddingPost('CONNECTION FAILED'));\n      }\n  }\n  \n  export function* watchAddingPost() {\n    yield takeEvery(\n      types.POST_ADDED_STARTED,\n      addingPost,\n    );\n  }\n\n  function* pictureSetted(action) {\n    if(typeof document !== 'undefined'){\n        yield window.location.href = URL+'post/'\n      }\n      else{\n        yield Actions.replace('Post')\n      }\n  }\n  \n  export function* watchPictureSetted() {\n    yield takeEvery(\n      types.PICTURE_SETTED,\n      pictureSetted,\n    );\n  }"]},"metadata":{},"sourceType":"module"}