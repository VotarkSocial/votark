{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(versusFetch),\n    _marked2 = _regeneratorRuntime.mark(watchVersusFetch),\n    _marked3 = _regeneratorRuntime.mark(voteFetch),\n    _marked4 = _regeneratorRuntime.mark(watchVoteFetch);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/versus\";\nimport * as types from \"../types/versus\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/versus\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction versusFetch(action) {\n  var isAuth, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function versusFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 34;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return call(fetch, API_BASE_URL + \"/user/versus/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 28;\n            break;\n          }\n\n          _context.next = 14;\n          return response.json();\n\n        case 14:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.versuses);\n          put(actions.setNull());\n          put(actions.completeFetchingVersus(normalized.entities.versuses, normalized.result));\n          put(startFetchinHeart(select(selectors.getVersus).id));\n          _context.next = 21;\n          return put(startFetchinLike(select(selectors.getVersus).id));\n\n        case 21:\n          console.log(\"wef\");\n          _context.next = 24;\n          return put(actions.startExtraUserFollowFetch(select(selectors.getExtraUser).id));\n\n        case 24:\n          _context.next = 26;\n          return put(actions.startUserFollowFetch(select(selectors.getUser).id));\n\n        case 26:\n          _context.next = 34;\n          break;\n\n        case 28:\n          _context.next = 30;\n          return response.json();\n\n        case 30:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 34;\n          return put(actions.failFetchingVersus(non_field_errors[0]));\n\n        case 34:\n          _context.next = 40;\n          break;\n\n        case 36:\n          _context.prev = 36;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 40;\n          return put(actions.failFetchingVersus('NETWORK ERROR'));\n\n        case 40:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 36]]);\n}\n\nexport function watchVersusFetch() {\n  return _regeneratorRuntime.wrap(function watchVersusFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.VERSUS_FETCHING_STARTED, versusFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction voteFetch(action) {\n  var isAuth, token, user, response, _yield$response$json2, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function voteFetch$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context3.sent;\n\n          if (!isAuth) {\n            _context3.next = 25;\n            break;\n          }\n\n          _context3.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context3.sent;\n          _context3.next = 10;\n          return select(selectors.getAuthUserID);\n\n        case 10:\n          user = _context3.sent;\n          _context3.next = 13;\n          return call(fetch, API_BASE_URL + \"/vote/\", {\n            method: 'POST',\n            body: JSON.stringify(_objectSpread(_objectSpread({}, action.payload), {}, {\n              user: user\n            })),\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 13:\n          response = _context3.sent;\n\n          if (!(response.status === 200)) {\n            _context3.next = 19;\n            break;\n          }\n\n          _context3.next = 17;\n          return put(actions.completeVoteVersus());\n\n        case 17:\n          _context3.next = 25;\n          break;\n\n        case 19:\n          _context3.next = 21;\n          return response.json();\n\n        case 21:\n          _yield$response$json2 = _context3.sent;\n          non_field_errors = _yield$response$json2.non_field_errors;\n          _context3.next = 25;\n          return put(actions.failVoteVersus(non_field_errors[0]));\n\n        case 25:\n          _context3.next = 31;\n          break;\n\n        case 27:\n          _context3.prev = 27;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 31;\n          return put(actions.failVoteVersus('NETWORK ERROR'));\n\n        case 31:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 27]]);\n}\n\nexport function watchVoteFetch() {\n  return _regeneratorRuntime.wrap(function watchVoteFetch$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(types.VERSUS_VOTE_STARTED, voteFetch);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/versus.js"],"names":["versusFetch","watchVersusFetch","voteFetch","watchVoteFetch","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","method","headers","response","status","json","jsonResult","normalized","versuses","setNull","completeFetchingVersus","entities","result","startFetchinHeart","getVersus","id","startFetchinLike","console","log","startExtraUserFollowFetch","getExtraUser","startUserFollowFetch","getUser","non_field_errors","failFetchingVersus","VERSUS_FETCHING_STARTED","getAuthUserID","user","body","JSON","stringify","payload","completeVoteVersus","failVoteVersus","VERSUS_VOTE_STARTED"],"mappings":"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","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/versus';\nimport * as types from '../types/versus';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/versus';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  \n  function* versusFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n    \n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/user/versus/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.versuses);\n            put(actions.setNull())\n            put(\n            actions.completeFetchingVersus(\n                normalized.entities.versuses,\n                normalized.result\n            ),\n            );\n            put(startFetchinHeart(select(selectors.getVersus).id))\n            yield put(startFetchinLike(select(selectors.getVersus).id))\n            console.log(\"wef\")\n            yield put(actions.startExtraUserFollowFetch(select(selectors.getExtraUser).id))\n            yield put(actions.startUserFollowFetch(select(selectors.getUser).id))\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failFetchingVersus(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failFetchingVersus('NETWORK ERROR'));\n      }\n  }\n  \n  export function* watchVersusFetch() {\n    yield takeEvery(\n      types.VERSUS_FETCHING_STARTED,\n      versusFetch,\n    );\n  }\n\n    \n  function* voteFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n    \n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const user = yield select(selectors.getAuthUserID);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/vote/`,\n            {\n              method: 'POST',\n              body: JSON.stringify({...action.payload,user}),\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            yield put(actions.completeVoteVersus())\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failVoteVersus(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failVoteVersus('NETWORK ERROR'));\n      }\n  }\n  \n  export function* watchVoteFetch() {\n    yield takeEvery(\n      types.VERSUS_VOTE_STARTED,\n      voteFetch,\n    );\n  }"]},"metadata":{},"sourceType":"module"}