{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(versusFetch),\n    _marked2 = _regeneratorRuntime.mark(watchVersusFetch);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/versus\";\nimport * as types from \"../types/versus\";\nimport { API_URL } from \"../../configuration\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction versusFetch(action) {\n  var isAuth, token, response;\n  return _regeneratorRuntime.wrap(function versusFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return console.log(\"here2\");\n\n        case 10:\n          _context.next = 12;\n          return call(fetch, API_BASE_URL + \"/user/versus/\", {\n            method: 'POST',\n            body: JSON.stringify({}),\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 12:\n          response = _context.sent;\n          console.log(response);\n\n        case 14:\n          _context.next = 18;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](0);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 16]]);\n}\n\nexport function watchVersusFetch() {\n  return _regeneratorRuntime.wrap(function watchVersusFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.VERSUS_FETCHING_STARTED, versusFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/versus.js"],"names":["versusFetch","watchVersusFetch","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","console","log","fetch","method","body","JSON","stringify","headers","response","VERSUS_FETCHING_STARTED"],"mappings":";;uCAmBYA,W;wCAiCOC,gB;;AApDnB,SACIC,IADJ,EAEIC,SAFJ,EAGIC,GAHJ,EAMIC,KANJ,EAOIC,MAPJ,QAQS,oBART;AAUE,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,OAAT;AAGA,IAAMC,YAAY,GAAID,OAAO,GAAG,QAAhC;;AAGA,SAAUV,WAAV,CAAsBY,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAMN,MAAM,CAACC,SAAS,CAACM,eAAX,CAAZ;;AAFrB;AAEYC,UAAAA,MAFZ;;AAAA,eAIUA,MAJV;AAAA;AAAA;AAAA;;AAAA;AAKsB,iBAAMR,MAAM,CAACC,SAAS,CAACQ,YAAX,CAAZ;;AALtB;AAKcC,UAAAA,KALd;AAAA;AAMQ,iBAAMC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAN;;AANR;AAAA;AAOyB,iBAAMhB,IAAI,CACzBiB,KADyB,EAEtBR,YAFsB,oBAGzB;AACES,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EAAf,CAFR;AAGEC,YAAAA,OAAO,EAAC;AACN,8BAAgB,kBADV;AAEN,wCAAwBR;AAFlB;AAHV,WAHyB,CAAV;;AAPzB;AAOcS,UAAAA,QAPd;AAmBQR,UAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;;AAnBR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCA,OAAO,SAAUxB,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CACbM,KAAK,CAACiB,uBADO,EAEb1B,WAFa,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n  \n  import * as selectors from '../reducers';\n  import * as actions from '../actions/versus';\n  import * as types from '../types/versus';\n  import { API_URL } from '../../configuration'\n  \n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  \n  function* versusFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n    \n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          yield console.log(\"here2\")\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/user/versus/`,\n            {\n              method: 'POST',\n              body: JSON.stringify({}),\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          console.log(response)\n          // if (response.status === 200) {\n          //   const { token } = yield response.json();\n          //   yield put(actions.completeLogin(token));\n          // } else {\n          //   const { non_field_errors } = yield response.json();\n          //   yield put(actions.failLogin(non_field_errors[0]));\n          // }\n        }\n      } catch (error) {\n        // yield put(actions.failLogin('Falló horrible la conexión mano'));\n      }\n  }\n  \n  export function* watchVersusFetch() {\n    yield takeEvery(\n      types.VERSUS_FETCHING_STARTED,\n      versusFetch,\n    );\n  }"]},"metadata":{},"sourceType":"module"}