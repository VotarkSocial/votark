{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nvar emitter = DeviceEventEmitter;\nvar sessions = {};\n\nvar RNFetchBlobSession = function () {\n  _createClass(RNFetchBlobSession, null, [{\n    key: \"getSession\",\n    value: function getSession(name) {\n      return sessions[name];\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(name, val) {\n      sessions[name] = val;\n    }\n  }, {\n    key: \"removeSession\",\n    value: function removeSession(name) {\n      delete sessions[name];\n    }\n  }]);\n\n  function RNFetchBlobSession(name, list) {\n    _classCallCheck(this, RNFetchBlobSession);\n\n    this.name = name;\n\n    if (!sessions[name]) {\n      if (Array.isArray(list)) sessions[name] = list;else sessions[name] = [];\n    }\n  }\n\n  _createClass(RNFetchBlobSession, [{\n    key: \"add\",\n    value: function add(path) {\n      sessions[this.name].push(path);\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(path) {\n      var list = sessions[this.name];\n\n      for (var i in list) {\n        if (list[i] === path) {\n          sessions[this.name].splice(i, 1);\n          break;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"list\",\n    value: function list() {\n      return sessions[this.name];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        RNFetchBlob.removeSession(sessions[_this.name], function (err) {\n          if (err) reject(err);else {\n            delete sessions[_this.name];\n            resolve();\n          }\n        });\n      });\n    }\n  }]);\n\n  return RNFetchBlobSession;\n}();\n\nexport { RNFetchBlobSession as default };","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/class/RNFetchBlobSession.js"],"names":["NativeAppEventEmitter","RNFetchBlob","NativeModules","emitter","DeviceEventEmitter","sessions","RNFetchBlobSession","name","val","list","Array","isArray","path","push","i","splice","Promise","resolve","reject","removeSession","err"],"mappings":";;;;SAOCA,qB;AAGD,IAAMC,WAAW,GAAGC,aAAa,CAACD,WAAlC;AACA,IAAME,OAAO,GAAGC,kBAAhB;AAEA,IAAIC,QAAQ,GAAG,EAAf;;IAEqBC,kB;;;+BAQDC,I,EAAiB;AACjC,aAAOF,QAAQ,CAACE,IAAD,CAAf;AACD;;;+BAEiBA,I,EAAaC,G,EAAS;AACtCH,MAAAA,QAAQ,CAACE,IAAD,CAAR,GAAiBC,GAAjB;AACD;;;kCAEoBD,I,EAAa;AAChC,aAAOF,QAAQ,CAACE,IAAD,CAAf;AACD;;;AAED,8BAAYA,IAAZ,EAAyBE,IAAzB,EAA6C;AAAA;;AAC3C,SAAKF,IAAL,GAAYA,IAAZ;;AACA,QAAG,CAACF,QAAQ,CAACE,IAAD,CAAZ,EAAoB;AAClB,UAAGG,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAH,EACAJ,QAAQ,CAACE,IAAD,CAAR,GAAiBE,IAAjB,CADA,KAGAJ,QAAQ,CAACE,IAAD,CAAR,GAAiB,EAAjB;AACD;AACF;;;;wBAEGK,I,EAAgC;AAClCP,MAAAA,QAAQ,CAAC,KAAKE,IAAN,CAAR,CAAoBM,IAApB,CAAyBD,IAAzB;AACA,aAAO,IAAP;AACD;;;2BAEMA,I,EAAgC;AACrC,UAAIH,IAAI,GAAGJ,QAAQ,CAAC,KAAKE,IAAN,CAAnB;;AACA,WAAI,IAAIO,CAAR,IAAaL,IAAb,EAAmB;AACjB,YAAGA,IAAI,CAACK,CAAD,CAAJ,KAAYF,IAAf,EAAqB;AACnBP,UAAAA,QAAQ,CAAC,KAAKE,IAAN,CAAR,CAAoBQ,MAApB,CAA2BD,CAA3B,EAA8B,CAA9B;AACA;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;2BAEoB;AACnB,aAAOT,QAAQ,CAAC,KAAKE,IAAN,CAAf;AACD;;;8BAEiB;AAAA;;AAChB,aAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCjB,QAAAA,WAAW,CAACkB,aAAZ,CAA0Bd,QAAQ,CAAC,KAAI,CAACE,IAAN,CAAlC,EAA+C,UAACa,GAAD,EAAS;AACtD,cAAGA,GAAH,EACEF,MAAM,CAACE,GAAD,CAAN,CADF,KAEK;AACH,mBAAOf,QAAQ,CAAC,KAAI,CAACE,IAAN,CAAf;AACAU,YAAAA,OAAO;AACR;AACF,SAPD;AAQD,OATM,CAAP;AAUD;;;;;;SA7DkBX,kB","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n NativeModules,\n DeviceEventEmitter,\n NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\n\nlet sessions = {}\n\nexport default class RNFetchBlobSession {\n\n  add : (path:string) => RNFetchBlobSession;\n  remove : (path:string) => RNFetchBlobSession;\n  dispose : () => Promise;\n  list : () => Array<string>;\n  name : string;\n\n  static getSession(name:string):any {\n    return sessions[name]\n  }\n\n  static setSession(name:string, val:any) {\n    sessions[name] = val\n  }\n\n  static removeSession(name:string) {\n    delete sessions[name]\n  }\n\n  constructor(name:string, list:Array<string>) {\n    this.name = name\n    if(!sessions[name]) {\n      if(Array.isArray(list))\n      sessions[name] = list\n      else\n      sessions[name] = []\n    }\n  }\n\n  add(path:string):RNFetchBlobSession {\n    sessions[this.name].push(path)\n    return this\n  }\n\n  remove(path:string):RNFetchBlobSession {\n    let list = sessions[this.name]\n    for(let i in list) {\n      if(list[i] === path) {\n        sessions[this.name].splice(i, 1)\n        break;\n      }\n    }\n    return this\n  }\n\n  list():Array<string> {\n    return sessions[this.name]\n  }\n\n  dispose():Promise {\n    return new Promise((resolve, reject) => {\n      RNFetchBlob.removeSession(sessions[this.name], (err) => {\n        if(err)\n          reject(err)\n        else {\n          delete sessions[this.name]\n          resolve()\n        }\n      })\n    })\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}