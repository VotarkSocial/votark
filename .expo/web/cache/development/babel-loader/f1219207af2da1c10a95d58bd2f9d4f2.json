{"ast":null,"code":"import * as types from \"../types/topic\";\nexport var startFetchTopic = function startFetchTopic() {\n  return {\n    type: types.TOPIC_FETCH_STARTED\n  };\n};\nexport var completeFetchTopic = function completeFetchTopic(entities, order) {\n  return {\n    type: types.TOPIC_FETCH_COMPLETED,\n    payload: {\n      entities: entities,\n      order: order\n    }\n  };\n};\nexport var failFetchTopic = function failFetchTopic(error) {\n  return {\n    type: types.TOPIC_FETCH_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var startTopic = function startTopic() {\n  return {\n    type: types.TOPIC_STARTED\n  };\n};\nexport var completeTopic = function completeTopic(entities, order) {\n  return {\n    type: types.TOPIC_COMPLETED,\n    payload: {\n      entities: entities,\n      order: order\n    }\n  };\n};\nexport var failTopic = function failTopic(error) {\n  return {\n    type: types.TOPIC_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var selectTopic = function selectTopic(id) {\n  return {\n    type: types.TOPIC_SELECTED,\n    payload: id\n  };\n};\nexport var startAddingTopic = function startAddingTopic(Topic, id) {\n  return {\n    type: types.TOPIC_ADDITION_STARTED,\n    payload: {\n      content: Topic,\n      id: id\n    }\n  };\n};\nexport var completeAddingTopic = function completeAddingTopic(oldId, Topic) {\n  return {\n    type: types.TOPIC_FETCH_COMPLETED,\n    payload: {\n      oldId: oldId,\n      content: Topic\n    }\n  };\n};\nexport var failAddingTopic = function failAddingTopic(oldId, error) {\n  return {\n    type: types.TOPIC_FETCH_FAILED,\n    payload: {\n      oldId: oldId,\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/actions/topic.js"],"names":["types","startFetchTopic","type","TOPIC_FETCH_STARTED","completeFetchTopic","entities","order","TOPIC_FETCH_COMPLETED","payload","failFetchTopic","error","TOPIC_FETCH_FAILED","startTopic","TOPIC_STARTED","completeTopic","TOPIC_COMPLETED","failTopic","TOPIC_FAILED","selectTopic","id","TOPIC_SELECTED","startAddingTopic","Topic","TOPIC_ADDITION_STARTED","content","completeAddingTopic","oldId","failAddingTopic"],"mappings":"AAAA,OAAO,KAAKA,KAAZ;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AAClCC,IAAAA,IAAI,EAAEF,KAAK,CAACG;AADsB,GAAP;AAAA,CAAxB;AAIP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAWC,KAAX;AAAA,SAAsB;AACpDJ,IAAAA,IAAI,EAAEF,KAAK,CAACO,qBADwC;AAEpDC,IAAAA,OAAO,EAAE;AACLH,MAAAA,QAAQ,EAARA,QADK;AAELC,MAAAA,KAAK,EAALA;AAFK;AAF2C,GAAtB;AAAA,CAA3B;AAQP,OAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK;AAAA,SAAK;AACpCR,IAAAA,IAAI,EAAEF,KAAK,CAACW,kBADwB;AAEpCH,IAAAA,OAAO,EAAE;AACLE,MAAAA,KAAK,EAALA;AADK;AAF2B,GAAL;AAAA,CAA5B;AAQP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAO;AAC7BV,IAAAA,IAAI,EAAEF,KAAK,CAACa;AADiB,GAAP;AAAA,CAAnB;AAIP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACT,QAAD,EAAWC,KAAX;AAAA,SAAsB;AAC/CJ,IAAAA,IAAI,EAAEF,KAAK,CAACe,eADmC;AAE/CP,IAAAA,OAAO,EAAE;AACLH,MAAAA,QAAQ,EAARA,QADK;AAELC,MAAAA,KAAK,EAALA;AAFK;AAFsC,GAAtB;AAAA,CAAtB;AAQP,OAAO,IAAMU,SAAS,GAAG,SAAZA,SAAY,CAAAN,KAAK;AAAA,SAAK;AAC/BR,IAAAA,IAAI,EAAEF,KAAK,CAACiB,YADmB;AAE/BT,IAAAA,OAAO,EAAE;AACLE,MAAAA,KAAK,EAALA;AADK;AAFsB,GAAL;AAAA,CAAvB;AAQP,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAAC,EAAE;AAAA,SAAK;AAC9BjB,IAAAA,IAAI,EAAEF,KAAK,CAACoB,cADkB;AAE9BZ,IAAAA,OAAO,EAAEW;AAFqB,GAAL;AAAA,CAAtB;AAMP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAOH,EAAP;AAAA,SAAe;AAC3CjB,IAAAA,IAAI,EAAEF,KAAK,CAACuB,sBAD+B;AAE3Cf,IAAAA,OAAO,EAAE;AACLgB,MAAAA,OAAO,EAAEF,KADJ;AAELH,MAAAA,EAAE,EAAFA;AAFK;AAFkC,GAAf;AAAA,CAAzB;AAQP,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAQJ,KAAR;AAAA,SAAmB;AAClDpB,IAAAA,IAAI,EAAEF,KAAK,CAACO,qBADsC;AAElDC,IAAAA,OAAO,EAAE;AACLkB,MAAAA,KAAK,EAALA,KADK;AAELF,MAAAA,OAAO,EAAEF;AAFJ;AAFyC,GAAnB;AAAA,CAA5B;AAOP,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACD,KAAD,EAAQhB,KAAR;AAAA,SAAmB;AAC9CR,IAAAA,IAAI,EAAEF,KAAK,CAACW,kBADkC;AAE9CH,IAAAA,OAAO,EAAE;AACLkB,MAAAA,KAAK,EAALA,KADK;AAELhB,MAAAA,KAAK,EAALA;AAFK;AAFqC,GAAnB;AAAA,CAAxB","sourcesContent":["import * as types from '../types/topic'\n\nexport const startFetchTopic = () => ({\n    type: types.TOPIC_FETCH_STARTED,\n  });\n\nexport const completeFetchTopic = (entities, order) => ({\n    type: types.TOPIC_FETCH_COMPLETED,\n    payload: {\n        entities,\n        order,\n    },\n    });\n\nexport const failFetchTopic = error => ({\n    type: types.TOPIC_FETCH_FAILED,\n    payload: {\n        error,\n    },\n});\n\n\nexport const startTopic = () => ({\n    type: types.TOPIC_STARTED,\n  });\n\nexport const completeTopic = (entities, order) => ({\n    type: types.TOPIC_COMPLETED,\n    payload: {\n        entities,\n        order,\n    },\n    });\n\nexport const failTopic = error => ({\n    type: types.TOPIC_FAILED,\n    payload: {\n        error,\n    },\n});\n\n\nexport const selectTopic = id => ({\n    type: types.TOPIC_SELECTED,\n    payload: id\n})\n\n\nexport const startAddingTopic = (Topic,id) => ({\n    type: types.TOPIC_ADDITION_STARTED,\n    payload: {\n        content: Topic,\n        id\n    },\n});\n\nexport const completeAddingTopic = (oldId, Topic) => ({\n    type: types.TOPIC_FETCH_COMPLETED,\n    payload: {\n        oldId,\n        content: Topic,\n    },\n});\nexport const failAddingTopic = (oldId, error) => ({\n    type: types.TOPIC_FETCH_FAILED,\n    payload: {\n        oldId,\n        error,\n    },\n});"]},"metadata":{},"sourceType":"module"}