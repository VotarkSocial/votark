{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(topicFetch),\n    _marked2 = _regeneratorRuntime.mark(watchTopicFetch),\n    _marked3 = _regeneratorRuntime.mark(addTopic),\n    _marked4 = _regeneratorRuntime.mark(watcTopicAddition);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/topic\";\nimport * as types from \"../types/topic\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/topic\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction topicFetch(action) {\n  var isAuth, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function topicFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 28;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return call(fetch, API_BASE_URL + \"/topic/trending/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 14;\n          return response.json();\n\n        case 14:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.topics);\n          _context.next = 18;\n          return put(actions.completeFetchTopic(normalized.entities.topics, normalized.result));\n\n        case 18:\n          _context.next = 20;\n          return put(actions.selectTopic(normalized.result[0]));\n\n        case 20:\n          _context.next = 28;\n          break;\n\n        case 22:\n          _context.next = 24;\n          return response.json();\n\n        case 24:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 28;\n          return put(actions.failFetchTopic(non_field_errors[0]));\n\n        case 28:\n          _context.next = 34;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 34;\n          return put(actions.failFetchTopic('CONNECTION FAILED'));\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 30]]);\n}\n\nexport function watchTopicFetch() {\n  return _regeneratorRuntime.wrap(function watchTopicFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.TOPIC_FETCH_STARTED, topicFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addTopic(action) {\n  var isAuth, token, response, topic;\n  return _regeneratorRuntime.wrap(function addTopic$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context3.sent;\n\n          if (!isAuth) {\n            _context3.next = 22;\n            break;\n          }\n\n          _context3.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context3.sent;\n          _context3.next = 10;\n          return call(fetch, API_BASE_URL + \"/topic/\", {\n            method: 'POST',\n            body: JSON.stringify(_objectSpread({}, action.payload.content)),\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context3.sent;\n\n          if (!(response.status === 201)) {\n            _context3.next = 22;\n            break;\n          }\n\n          _context3.next = 14;\n          return response.json();\n\n        case 14:\n          topic = _context3.sent;\n          print(topic);\n          _context3.next = 18;\n          return put(actions.completeAddingTopic(action.payload.id, topic));\n\n        case 18:\n          _context3.next = 20;\n          return put(startFetchTopic());\n\n        case 20:\n          _context3.next = 22;\n          break;\n\n        case 22:\n          _context3.next = 26;\n          break;\n\n        case 24:\n          _context3.prev = 24;\n          _context3.t0 = _context3[\"catch\"](0);\n\n        case 26:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 24]]);\n}\n\nexport function watcTopicAddition() {\n  return _regeneratorRuntime.wrap(function watcTopicAddition$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(types.TOPIC_ADDITION_STARTED, addTopic);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/topic.js"],"names":["topicFetch","watchTopicFetch","addTopic","watcTopicAddition","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","method","headers","response","status","json","jsonResult","normalized","topics","completeFetchTopic","entities","result","selectTopic","non_field_errors","failFetchTopic","TOPIC_FETCH_STARTED","body","JSON","stringify","payload","content","topic","print","completeAddingTopic","id","startFetchTopic","TOPIC_ADDITION_STARTED"],"mappings":"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","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/topic';\nimport * as types from '../types/topic';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/topic';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  function* topicFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/topic/trending/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.topics);\n            yield put(\n            actions.completeFetchTopic(\n                normalized.entities.topics,\n                normalized.result\n            ),\n            );\n            yield put(actions.selectTopic(normalized.result[0]))\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failFetchTopic(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failFetchTopic('CONNECTION FAILED'));\n      }\n  }\n  \n  export function* watchTopicFetch() {\n    yield takeEvery(\n      types.TOPIC_FETCH_STARTED,\n      topicFetch,\n    );\n  }\n\n  function* addTopic(action) {\n    try {\n      const isAuth = yield select(selectors.isAuthenticated);\n  \n      if (isAuth) {\n        const token = yield select(selectors.getAuthToken);\n        const response = yield call(\n          fetch,\n          `${API_BASE_URL}/topic/`,\n          {\n            method: 'POST',\n            body: JSON.stringify({...action.payload.content}),\n            headers:{\n              'Content-Type': 'application/json',\n              'Authorization': `JWT ${token}`,\n            },\n          }\n        );\n  \n        if (response.status === 201) {\n          const topic = yield response.json();\n          print(topic)\n          yield put(\n            actions.completeAddingTopic(\n              action.payload.id,\n              topic,\n            ),\n          );\n          yield put(startFetchTopic())\n        } else {\n          // const { non_field_errors } = yield response.json();\n          // yield put(actions.failLogin(non_field_errors[0]));\n        }\n      }\n    } catch (error) {\n      // yield put(actions.failLogin(''));\n    }\n  }\n\n  export function* watcTopicAddition() {\n    yield takeEvery(\n      types.TOPIC_ADDITION_STARTED,\n      addTopic,\n    );\n  }"]},"metadata":{},"sourceType":"module"}