{"ast":null,"code":"import * as types from \"../types/auth\";\nexport var startLogin = function startLogin(username, password) {\n  return {\n    type: types.AUTHENTICATION_STARTED,\n    payload: {\n      username: username,\n      password: password\n    }\n  };\n};\nexport var completeLogin = function completeLogin(token) {\n  return {\n    type: types.AUTHENTICATION_COMPLETED,\n    payload: {\n      token: token\n    }\n  };\n};\nexport var failLogin = function failLogin(error) {\n  return {\n    type: types.AUTHENTICATION_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var startRegistration = function startRegistration(username, password, email) {\n  return {\n    type: types.REGISTRATION_STARTED,\n    payload: {\n      username: username,\n      password: password,\n      email: email\n    }\n  };\n};\nexport var completeRegistration = function completeRegistration() {\n  return {\n    type: types.REGISTRATION_COMPLETED\n  };\n};\nexport var failRegistration = function failRegistration(error) {\n  return {\n    type: types.REGISTRATION_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var logout = function logout() {\n  return {\n    type: types.AUTHENTICATION_IDENTITY_CLEARED\n  };\n};\nexport var startTokenRefresh = function startTokenRefresh() {\n  return {\n    type: types.TOKEN_REFRESH_STARTED\n  };\n};\nexport var completeTokenRefresh = function completeTokenRefresh(newToken) {\n  return {\n    type: types.TOKEN_REFRESH_COMPLETED,\n    payload: {\n      newToken: newToken\n    }\n  };\n};\nexport var failTokenRefresh = function failTokenRefresh(error) {\n  return {\n    type: types.TOKEN_REFRESH_FAILED,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/actions/auth.js"],"names":["types","startLogin","username","password","type","AUTHENTICATION_STARTED","payload","completeLogin","token","AUTHENTICATION_COMPLETED","failLogin","error","AUTHENTICATION_FAILED","startRegistration","email","REGISTRATION_STARTED","completeRegistration","REGISTRATION_COMPLETED","failRegistration","REGISTRATION_FAILED","logout","AUTHENTICATION_IDENTITY_CLEARED","startTokenRefresh","TOKEN_REFRESH_STARTED","completeTokenRefresh","newToken","TOKEN_REFRESH_COMPLETED","failTokenRefresh","TOKEN_REFRESH_FAILED"],"mappings":"AAAA,OAAO,KAAKA,KAAZ;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,QAAX;AAAA,SAAyB;AACjDC,IAAAA,IAAI,EAAEJ,KAAK,CAACK,sBADqC;AAEjDC,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA;AAAZ;AAFwC,GAAzB;AAAA,CAAnB;AAKP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAK;AACrCJ,IAAAA,IAAI,EAAEJ,KAAK,CAACS,wBADyB;AAErCH,IAAAA,OAAO,EAAE;AAAEE,MAAAA,KAAK,EAALA;AAAF;AAF4B,GAAL;AAAA,CAA3B;AAKP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA,SAAK;AACjCP,IAAAA,IAAI,EAAEJ,KAAK,CAACY,qBADqB;AAEjCN,IAAAA,OAAO,EAAE;AAAEK,MAAAA,KAAK,EAALA;AAAF;AAFwB,GAAL;AAAA,CAAvB;AAKP,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACX,QAAD,EAAWC,QAAX,EAAqBW,KAArB;AAAA,SAAgC;AAC/DV,IAAAA,IAAI,EAAEJ,KAAK,CAACe,oBADmD;AAE/DT,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA,QAAZ;AAAsBW,MAAAA,KAAK,EAALA;AAAtB;AAFsD,GAAhC;AAAA,CAA1B;AAKP,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAAO;AACzCZ,IAAAA,IAAI,EAAEJ,KAAK,CAACiB;AAD6B,GAAP;AAAA,CAA7B;AAIP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAP,KAAK;AAAA,SAAK;AACxCP,IAAAA,IAAI,EAAEJ,KAAK,CAACmB,mBAD4B;AAExCb,IAAAA,OAAO,EAAE;AAAEK,MAAAA,KAAK,EAALA;AAAF;AAF+B,GAAL;AAAA,CAA9B;AAKP,OAAO,IAAMS,MAAM,GAAG,SAATA,MAAS;AAAA,SAAO;AAC3BhB,IAAAA,IAAI,EAAEJ,KAAK,CAACqB;AADe,GAAP;AAAA,CAAf;AAIP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAO;AACtClB,IAAAA,IAAI,EAAEJ,KAAK,CAACuB;AAD0B,GAAP;AAAA,CAA1B;AAIP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,QAAQ;AAAA,SAAK;AAC/CrB,IAAAA,IAAI,EAAEJ,KAAK,CAAC0B,uBADmC;AAE/CpB,IAAAA,OAAO,EAAE;AAAEmB,MAAAA,QAAQ,EAARA;AAAF;AAFsC,GAAL;AAAA,CAArC;AAKP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAhB,KAAK;AAAA,SAAK;AACxCP,IAAAA,IAAI,EAAEJ,KAAK,CAAC4B,oBAD4B;AAExCtB,IAAAA,OAAO,EAAE;AAAEK,MAAAA,KAAK,EAALA;AAAF;AAF+B,GAAL;AAAA,CAA9B","sourcesContent":["import * as types from '../types/auth';\n\n\nexport const startLogin = (username, password) => ({\n  type: types.AUTHENTICATION_STARTED,\n  payload: { username, password },\n});\n\nexport const completeLogin = token => ({\n  type: types.AUTHENTICATION_COMPLETED,\n  payload: { token },\n});\n\nexport const failLogin = error => ({\n  type: types.AUTHENTICATION_FAILED,\n  payload: { error },\n});\n\nexport const startRegistration = (username, password, email) => ({\n  type: types.REGISTRATION_STARTED,\n  payload: { username, password, email },\n});\n\nexport const completeRegistration = () => ({\n  type: types.REGISTRATION_COMPLETED,\n});\n\nexport const failRegistration = error => ({\n  type: types.REGISTRATION_FAILED,\n  payload: { error },\n});\n\nexport const logout = () => ({\n  type: types.AUTHENTICATION_IDENTITY_CLEARED,\n});\n\nexport const startTokenRefresh = () => ({\n  type: types.TOKEN_REFRESH_STARTED,\n});\n\nexport const completeTokenRefresh = newToken => ({\n  type: types.TOKEN_REFRESH_COMPLETED,\n  payload: { newToken },\n});\n\nexport const failTokenRefresh = error => ({\n  type: types.TOKEN_REFRESH_FAILED,\n  payload: { error },\n});\n"]},"metadata":{},"sourceType":"module"}