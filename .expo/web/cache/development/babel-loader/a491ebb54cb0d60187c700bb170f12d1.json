{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(sendReport),\n    _marked2 = _regeneratorRuntime.mark(watchSendReport);\n\nimport { call, takeEvery, put, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/report\";\nimport * as types from \"../types/report\";\nimport { API_URL } from \"../../configuration\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction sendReport(action) {\n  var isAuth, token, response, jsonResult, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function sendReport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return call(fetch, API_BASE_URL + \"/report/\", {\n            method: 'POST',\n            body: action.payload,\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.next = 14;\n          return response.json();\n\n        case 14:\n          jsonResult = _context.sent;\n          _context.next = 17;\n          return put(actions.completeSendingReport());\n\n        case 17:\n          _context.next = 25;\n          break;\n\n        case 19:\n          _context.next = 21;\n          return response.json();\n\n        case 21:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 25;\n          return put(actions.failSendingReport(non_field_errors[0]));\n\n        case 25:\n          _context.next = 31;\n          break;\n\n        case 27:\n          _context.prev = 27;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 31;\n          return put(actions.failSendingReport('CONNECTION FAILED'));\n\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 27]]);\n}\n\nexport function watchSendReport() {\n  return _regeneratorRuntime.wrap(function watchSendReport$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.SEND_REPORT_STARTED, sendReport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/report.js"],"names":["sendReport","watchSendReport","call","takeEvery","put","select","selectors","actions","types","API_URL","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","method","body","payload","headers","response","status","json","jsonResult","completeSendingReport","non_field_errors","failSendingReport","SEND_REPORT_STARTED"],"mappings":";;uCAgBYA,U;wCA8BOC,e;;AA9CnB,SACIC,IADJ,EAEIC,SAFJ,EAGIC,GAHJ,EAMIC,MANJ,QAOS,oBAPT;AASA,OAAO,KAAKC,SAAZ;AACA,OAAO,KAAKC,OAAZ;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,OAAT;AAEE,IAAMC,YAAY,GAAID,OAAO,GAAG,QAAhC;;AAEA,SAAUT,UAAV,CAAqBW,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAMN,MAAM,CAACC,SAAS,CAACM,eAAX,CAAZ;;AAFrB;AAEYC,UAAAA,MAFZ;;AAAA,eAGUA,MAHV;AAAA;AAAA;AAAA;;AAAA;AAIsB,iBAAMR,MAAM,CAACC,SAAS,CAACQ,YAAX,CAAZ;;AAJtB;AAIcC,UAAAA,KAJd;AAAA;AAKyB,iBAAMb,IAAI,CACzBc,KADyB,EAEtBN,YAFsB,eAGzB;AACEO,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,IAAI,EAAEP,MAAM,CAACQ,OAFf;AAGEC,YAAAA,OAAO,EAAC;AACN,8BAAgB,kBADV;AAEN,wCAAwBL;AAFlB;AAHV,WAHyB,CAAV;;AALzB;AAKcM,UAAAA,QALd;;AAAA,gBAiBYA,QAAQ,CAACC,MAAT,KAAoB,GAjBhC;AAAA;AAAA;AAAA;;AAAA;AAkB6B,iBAAMD,QAAQ,CAACE,IAAT,EAAN;;AAlB7B;AAkBgBC,UAAAA,UAlBhB;AAAA;AAmBU,iBAAMpB,GAAG,CAACG,OAAO,CAACkB,qBAAR,EAAD,CAAT;;AAnBV;AAAA;AAAA;;AAAA;AAAA;AAqBuC,iBAAMJ,QAAQ,CAACE,IAAT,EAAN;;AArBvC;AAAA;AAqBkBG,UAAAA,gBArBlB,wBAqBkBA,gBArBlB;AAAA;AAsBU,iBAAMtB,GAAG,CAACG,OAAO,CAACoB,iBAAR,CAA0BD,gBAAgB,CAAC,CAAD,CAA1C,CAAD,CAAT;;AAtBV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA0BM,iBAAMtB,GAAG,CAACG,OAAO,CAACoB,iBAAR,CAA0B,mBAA1B,CAAD,CAAT;;AA1BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BA,OAAO,SAAU1B,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CACbK,KAAK,CAACoB,mBADO,EAEb5B,UAFa,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/report';\nimport * as types from '../types/report';\nimport { API_URL } from '../../configuration';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  function* sendReport(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/report/`,\n            {\n              method: 'POST',\n              body: action.payload,\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            yield put(actions.completeSendingReport());\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failSendingReport(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failSendingReport('CONNECTION FAILED'));\n      }\n  }\n  \n  export function* watchSendReport() {\n    yield takeEvery(\n      types.SEND_REPORT_STARTED,\n      sendReport,\n    );\n  }\n"]},"metadata":{},"sourceType":"module"}