{"ast":null,"code":"import omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\nimport * as types from \"../types/post\";\n\nvar image = function image() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.PICTURE_SETTED:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar isFetching = function isFetching() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.POST_ADDED_STARTED:\n      {\n        return true;\n      }\n\n    case types.POST_ADDED_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.POST_ADDED_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar error = function error() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.POST_ADDED_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.POST_ADDED_STARTED:\n      {\n        return null;\n      }\n\n    case types.POST_ADDED_COMPLETED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default combineReducers({\n  image: image,\n  isFetching: isFetching,\n  error: error\n});\nexport var getImage = function getImage(state) {\n  return state.image;\n};\nexport var getAddingPostError = function getAddingPostError(state) {\n  return state.error;\n};\nexport var getIsAddingPost = function getIsAddingPost(state) {\n  return state.isFetching;\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/reducers/newPost.js"],"names":["omit","combineReducers","types","image","state","action","type","PICTURE_SETTED","payload","isFetching","POST_ADDED_STARTED","POST_ADDED_COMPLETED","POST_ADDED_FAILED","error","getImage","getAddingPostError","getIsAddingPost"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAO,KAAKC,KAAZ;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAA0B;AAAA,MAAzBC,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AACtC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKJ,KAAK,CAACK,cAAX;AACE,aAAOF,MAAM,CAACG,OAAd;;AACF;AACE,aAAOJ,KAAP;AAJJ;AAMD,CAPD;;AASA,IAAMK,UAAU,GAAG,SAAbA,UAAa,GAA2B;AAAA,MAA1BL,KAA0B,uEAAlB,KAAkB;AAAA,MAAXC,MAAW;;AAC5C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKJ,KAAK,CAACQ,kBAAX;AAA+B;AAC7B,eAAO,IAAP;AACD;;AACD,SAAKR,KAAK,CAACS,oBAAX;AAAiC;AAC/B,eAAO,KAAP;AACD;;AACD,SAAKT,KAAK,CAACU,iBAAX;AAA8B;AAC5B,eAAO,KAAP;AACD;;AACD;AAAS;AACP,eAAOR,KAAP;AACD;AAZH;AAcD,CAfD;;AAiBA,IAAMS,KAAK,GAAG,SAARA,KAAQ,GAA0B;AAAA,MAAzBT,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AACtC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKJ,KAAK,CAACU,iBAAX;AAA8B;AAC5B,eAAOP,MAAM,CAACG,OAAP,CAAeK,KAAtB;AACD;;AACD,SAAKX,KAAK,CAACQ,kBAAX;AAA+B;AAC7B,eAAO,IAAP;AACD;;AACD,SAAKR,KAAK,CAACS,oBAAX;AAAiC;AAC/B,eAAO,IAAP;AACD;;AACD;AAAS;AACP,eAAOP,KAAP;AACD;AAZH;AAcD,CAfD;;AAiBA,eAAeH,eAAe,CAAC;AAC7BE,EAAAA,KAAK,EAALA,KAD6B;AAE7BM,EAAAA,UAAU,EAAVA,UAF6B;AAG7BI,EAAAA,KAAK,EAALA;AAH6B,CAAD,CAA9B;AAMA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAV,KAAK;AAAA,SAAIA,KAAK,CAACD,KAAV;AAAA,CAAtB;AACP,OAAO,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAX,KAAK;AAAA,SAAIA,KAAK,CAACS,KAAV;AAAA,CAAhC;AACP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAZ,KAAK;AAAA,SAAIA,KAAK,CAACK,UAAV;AAAA,CAA7B","sourcesContent":["import omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\n\nimport * as types from '../types/post';\n\n\nconst image = (state = null, action) => {\n  switch(action.type) {\n    case types.PICTURE_SETTED:\n      return action.payload;\n    default: \n      return state;\n  }\n};\n\nconst isFetching = (state = false, action) => {\n  switch(action.type) {\n    case types.POST_ADDED_STARTED: {\n      return true;\n    }\n    case types.POST_ADDED_COMPLETED: {\n      return false;\n    }\n    case types.POST_ADDED_FAILED: {\n      return false;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst error = (state = null, action) => {\n  switch(action.type) {\n    case types.POST_ADDED_FAILED: {\n      return action.payload.error;\n    }\n    case types.POST_ADDED_STARTED: {\n      return null;\n    }\n    case types.POST_ADDED_COMPLETED: {\n      return null;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default combineReducers({\n  image,\n  isFetching,\n  error,\n});\n\nexport const getImage = state => state.image;\nexport const getAddingPostError = state => state.error;\nexport const getIsAddingPost = state => state.isFetching;\n"]},"metadata":{},"sourceType":"module"}