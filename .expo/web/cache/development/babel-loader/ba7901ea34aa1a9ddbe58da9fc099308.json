{"ast":null,"code":"var _jsxFileName = \"/home/thecoder/Documentos/votark/votark/src/components/Posts/index.js\";\nimport { connect } from 'react-redux';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as selectors from \"../../reducers\";\nimport React from 'react';\nimport styles from \"./styles\";\nimport { URL, STATIC_URL } from \"../../../configuration\";\nimport { Actions } from 'react-native-router-flux';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { colors } from \"../../../configuration\";\nimport { logout } from \"../../actions/auth\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport FitImage from 'react-native-fit-image';\nimport { gridList } from \"../../utils/gridList\";\n\nvar Posts = function Posts(_ref) {\n  var posts = _ref.posts,\n      isFetching = _ref.isFetching,\n      fetchedOnce = _ref.fetchedOnce;\n\n  if (posts.length !== 0) {\n    return React.createElement(ScrollView, {\n      style: styles.posts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, posts.map(function (row) {\n      return React.createElement(View, {\n        style: styles.row,\n        key: row[0].id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }\n      }, row.map(function (post) {\n        return React.createElement(View, {\n          key: post.id,\n          style: styles.post,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 37\n          }\n        }, \"@\", post.username, \" \"), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 37\n          }\n        }, \"topic:\", post.topicname, \" \"), React.createElement(FitImage, {\n          style: styles.image,\n          source: {\n            uri: STATIC_URL + post.image\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 37\n          }\n        }), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 37\n          }\n        }, \"victories:\", post.victories, \" \"), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 37\n          }\n        }, \"clasification:\", post.order, \" \"));\n      }));\n    }));\n  }\n\n  return React.createElement(Text, {\n    style: styles.mainText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"NO POSTS\");\n};\n\nexport default connect(function (state, _ref2) {\n  var posts = _ref2.posts;\n  return {\n    posts: gridList(posts),\n    isFetching: selectors.isFetchingPost(state),\n    fetchedOnce: selectors.getFetchedOnce(state)\n  };\n}, function (dispatch) {\n  return {};\n})(Posts);","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/components/Posts/index.js"],"names":["connect","selectors","React","styles","URL","STATIC_URL","Actions","LinearGradient","colors","logout","ScrollView","FitImage","gridList","Posts","posts","isFetching","fetchedOnce","length","map","row","id","post","text","username","topicname","image","uri","victories","order","mainText","state","isFetchingPost","getFetchedOnce","dispatch"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport {Text, View, Image, TouchableOpacity } from 'react-native';\nimport * as selectors from '../../reducers'\nimport React from 'react';\nimport styles from './styles'\nimport { URL, STATIC_URL } from '../../../configuration'\nimport { Actions } from 'react-native-router-flux';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { colors } from '../../../configuration';\nimport { logout } from '../../actions/auth';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport FitImage from 'react-native-fit-image';\nimport { gridList } from '../../utils/gridList';\n\nconst Posts = ({posts, isFetching, fetchedOnce}) => {\n    if(posts.length!==0){\n        return(\n            <ScrollView style={styles.posts}>\n                {\n                    posts.map(row =>\n                        <View style={styles.row} key={row[0].id}>\n                            {row.map(post => \n                                <View key={post.id} style={styles.post}>\n                                    <Text style={styles.text}>@{post.username} </Text>\n                                    <Text style={styles.text}>topic:{post.topicname} </Text>\n                                    <FitImage  \n                                        style={styles.image}\n                                        source={{uri: STATIC_URL+post.image}} \n                                    />\n                                    <Text style={styles.text}>victories:{post.victories} </Text>\n                                    <Text style={styles.text}>clasification:{post.order} </Text>\n                                </View>\n                            )}\n                        </View>\n                        )}\n            </ScrollView>\n    )}\n    return (\n        <Text style={styles.mainText}>NO POSTS</Text>)\n};\n\nexport default connect(\n  (state, {posts}) => ({\n      posts:gridList(posts),\n      isFetching: selectors.isFetchingPost(state),\n      fetchedOnce: selectors.getFetchedOnce(state)\n  }),\n  dispatch => ({\n    \n  }),\n)(Posts);\n"]},"metadata":{},"sourceType":"module"}