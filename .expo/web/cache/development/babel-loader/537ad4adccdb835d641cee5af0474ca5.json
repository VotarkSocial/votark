{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar StatefulPromise = function (_Promise) {\n  _inherits(StatefulPromise, _Promise);\n\n  var _super = _createSuper(StatefulPromise);\n\n  function StatefulPromise() {\n    _classCallCheck(this, StatefulPromise);\n\n    return _super.apply(this, arguments);\n  }\n\n  return StatefulPromise;\n}(_wrapNativeSuper(Promise));\n\nexport { StatefulPromise as default };","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/node_modules/react-native-fetch-blob/class/StatefulPromise.js"],"names":["StatefulPromise","Promise"],"mappings":";;;;;;;;;;IAIqBA,e;;;;;;;;;;;;mBAAwBC,O;;SAAxBD,e","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nexport default class StatefulPromise extends Promise {\n\n}\n"]},"metadata":{},"sourceType":"module"}