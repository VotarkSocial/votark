{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width,\n    SCREEN_HEIGHT = _Dimensions$get.height;\n\nvar scale = Math.sqrt(Math.pow(SCREEN_WIDTH, 2) + Math.pow(SCREEN_HEIGHT, 2)) / 25;\nexport function normalize(size) {\n  var newSize = size * scale;\n\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize) + Math.pow(newSize, 1 / 2))) + 20;\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize) + Math.pow(newSize, 1 / 2)));\n  }\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/utils/normalize.js"],"names":["Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","scale","Math","sqrt","pow","normalize","size","newSize","Platform","OS","round","PixelRatio","roundToNearestPixel","log"],"mappings":";;;;sBAKIA,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAFKC,Y,mBAAPC,K;IACQC,a,mBAARC,M;;AAGF,IAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASP,YAAT,EAAsB,CAAtB,IAA2BK,IAAI,CAACE,GAAL,CAASL,aAAT,EAAuB,CAAvB,CAArC,IAAgE,EAA9E;AAEA,OAAO,SAASM,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,MAAMC,OAAO,GAAGD,IAAI,GAAGL,KAAvB;;AACA,MAAIO,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOP,IAAI,CAACQ,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BV,IAAI,CAACW,GAAL,CAASN,OAAT,IAAkBL,IAAI,CAACE,GAAL,CAASG,OAAT,EAAkB,IAAE,CAApB,CAAjD,CAAX,IAAyF,EAAhG;AACD,GAFD,MAEO;AACL,WAAOL,IAAI,CAACQ,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BV,IAAI,CAACW,GAAL,CAASN,OAAT,IAAkBL,IAAI,CAACE,GAAL,CAASG,OAAT,EAAkB,IAAE,CAApB,CAAjD,CAAX,CAAP;AACD;AACF","sourcesContent":["import { Dimensions, Platform, PixelRatio } from 'react-native';\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scale = Math.sqrt(Math.pow(SCREEN_WIDTH,2) + Math.pow(SCREEN_HEIGHT,2))/25;\n\nexport function normalize(size) {\n  const newSize = size * scale\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,(1/2)))) +  20\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(Math.log(newSize)+Math.pow(newSize,(1/2))))\n  }\n}"]},"metadata":{},"sourceType":"module"}