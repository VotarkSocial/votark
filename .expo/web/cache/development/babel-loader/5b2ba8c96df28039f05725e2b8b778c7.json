{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport * as types from \"../types/search\";\n\nvar hashtags = function hashtags() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        var _action$payload = action.payload,\n            entities = _action$payload.entities,\n            order = _action$payload.order;\n\n        var newState = _objectSpread({}, state);\n\n        order.forEach(function (id) {\n          newState[id] = _objectSpread(_objectSpread({}, entities[id]), {}, {\n            isConfirmed: true\n          });\n        });\n        return newState;\n      }\n\n    case types.HASHTAG_SEARCH_FETCHED_COMPLETED:\n      {\n        var _action$payload2 = action.payload,\n            _entities = _action$payload2.entities,\n            _order = _action$payload2.order;\n\n        var _newState = _objectSpread({}, state);\n\n        _order.forEach(function (id) {\n          _newState[id] = _objectSpread(_objectSpread({}, _entities[id]), {}, {\n            isConfirmed: true\n          });\n        });\n\n        return _newState;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar users = function users() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.USER_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        var _action$payload3 = action.payload,\n            entities = _action$payload3.entities,\n            order = _action$payload3.order;\n        console.log(entities, order);\n\n        var newState = _objectSpread({}, state);\n\n        order.forEach(function (id) {\n          newState[id] = _objectSpread(_objectSpread({}, entities[id]), {}, {\n            isConfirmed: true\n          });\n        });\n        return newState;\n      }\n\n    case types.USER_SEARCH_FETCHED_COMPLETED:\n      {\n        var _action$payload4 = action.payload,\n            _entities2 = _action$payload4.entities,\n            _order2 = _action$payload4.order;\n\n        var _newState2 = _objectSpread({}, state);\n\n        _order2.forEach(function (id) {\n          _newState2[id] = _objectSpread(_objectSpread({}, _entities2[id]), {}, {\n            isConfirmed: true\n          });\n        });\n\n        return _newState2;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar UserOrder = function UserOrder() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.USER_SEARCH_FETCHED_COMPLETED:\n      {\n        return action.payload.order;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        return action.payload.order;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar HashtagOrder = function HashtagOrder() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        return action.payload.order;\n      }\n\n    case types.HASHTAG_SEARCH_FETCHED_COMPLETED:\n      {\n        return action.payload.order;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isFetchingUser = function isFetchingUser() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.USER_SEARCH_FETCHED_STARTED:\n      {\n        return true;\n      }\n\n    case types.USER_SEARCH_FETCHED_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.USER_SEARCH_FETCHED_FAILED:\n      {\n        return false;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_STARTED:\n      {\n        return true;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isFetchingHashtag = function isFetchingHashtag() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.HASHTAG_SEARCH_FETCHED_STARTED:\n      {\n        return true;\n      }\n\n    case types.HASHTAG_SEARCH_FETCHED_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.HASHTAG_SEARCH_FETCHED_FAILED:\n      {\n        return false;\n      }\n\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_STARTED:\n      {\n        return true;\n      }\n\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar errorUser = function errorUser() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.USER_SEARCH_FETCHED_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.USER_SEARCH_FETCHED_COMPLETED:\n      {\n        return null;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_STARTED:\n      {\n        return null;\n      }\n\n    case types.USER_SEARCH_HISTORY_FETCHED_STARTED:\n      {\n        return null;\n      }\n\n    case types.USER_SEARCH_FETCHED_STARTED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar errorHashtag = function errorHashtag() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.HASHTAG_SEARCH_FETCHED_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.HASHTAG_SEARCH_FETCHED_COMPLETED:\n      {\n        return null;\n      }\n\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED:\n      {\n        return null;\n      }\n\n    case types.HASHTAG_SEARCH_FETCHED_STARTED:\n      {\n        return null;\n      }\n\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_STARTED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default combineReducers({\n  users: users,\n  hashtags: hashtags,\n  HashtagOrder: HashtagOrder,\n  UserOrder: UserOrder,\n  errorHashtag: errorHashtag,\n  errorUser: errorUser,\n  isFetchingHashtag: isFetchingHashtag,\n  isFetchingUser: isFetchingUser\n});\nexport var getUser = function getUser(state, id) {\n  return state.users[id];\n};\nexport var getHashtag = function getHashtag(state, id) {\n  return state.hashtags[id];\n};\nexport var getSearchedUsers = function getSearchedUsers(state) {\n  return state.UserOrder.map(function (id) {\n    return getUser(state, id);\n  });\n};\nexport var getSearchedHashtag = function getSearchedHashtag(state) {\n  return state.HashtagOrder.map(function (id) {\n    console.log(id);\n    getHashtag(state, id);\n  });\n};\nexport var getisFetchingHashtag = function getisFetchingHashtag(state) {\n  return state.isFetchingHashtag;\n};\nexport var getisFetchingSearchedUser = function getisFetchingSearchedUser(state) {\n  return state.isFetchingUser;\n};\nexport var getError_Hashtag_search = function getError_Hashtag_search(state) {\n  return state.errorHashtag;\n};\nexport var getError_User_search = function getError_User_search(state) {\n  return state.errorUser;\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/reducers/search.js"],"names":["combineReducers","types","hashtags","state","action","type","HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED","payload","entities","order","newState","forEach","id","isConfirmed","HASHTAG_SEARCH_FETCHED_COMPLETED","users","USER_SEARCH_HISTORY_FETCHED_COMPLETED","console","log","USER_SEARCH_FETCHED_COMPLETED","UserOrder","HashtagOrder","isFetchingUser","USER_SEARCH_FETCHED_STARTED","USER_SEARCH_FETCHED_FAILED","USER_SEARCH_HISTORY_FETCHED_STARTED","USER_SEARCH_HISTORY_FETCHED_FAILED","isFetchingHashtag","HASHTAG_SEARCH_FETCHED_STARTED","HASHTAG_SEARCH_FETCHED_FAILED","HASHTAG_SEARCH_HISTORY_FETCHED_STARTED","HASHTAG_SEARCH_HISTORY_FETCHED_FAILED","errorUser","error","errorHashtag","getUser","getHashtag","getSearchedUsers","map","getSearchedHashtag","getisFetchingHashtag","getisFetchingSearchedUser","getError_Hashtag_search","getError_User_search"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport * as types from '../types/search';\n\n\nconst hashtags = (state = {}, action) => {\n  switch(action.type) {\n    case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED: {\n      const { entities, order } = action.payload;\n      const newState = { ...state };\n      order.forEach(id => {\n        newState[id] = {\n          ...entities[id],\n          isConfirmed: true,\n        };\n      });\n      return newState;\n    }\n    case types.HASHTAG_SEARCH_FETCHED_COMPLETED: {\n        const { entities, order } = action.payload;\n        const newState = { ...state };\n        order.forEach(id => {\n          newState[id] = {\n            ...entities[id],\n            isConfirmed: true,\n          };\n        });\n        return newState;\n      }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst users = (state = {}, action) => {\n    switch(action.type) {\n      case types.USER_SEARCH_HISTORY_FETCHED_COMPLETED: {\n        const { entities, order } = action.payload;\n        console.log(entities,order)\n        const newState = { ...state };\n        order.forEach(id => {\n          newState[id] = {\n            ...entities[id],\n            isConfirmed: true,\n          };\n        });\n        return newState;\n      }\n      case types.USER_SEARCH_FETCHED_COMPLETED: {\n          const { entities, order } = action.payload;\n          const newState = { ...state };\n          order.forEach(id => {\n            newState[id] = {\n              ...entities[id],\n              isConfirmed: true,\n            };\n          });\n          return newState;\n        }\n      default: {\n        return state;\n      }\n    }\n  };\n\nconst UserOrder = (state = [], action) => {\n  switch(action.type) {\n    case types.USER_SEARCH_FETCHED_COMPLETED: {\n      return action.payload.order;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_COMPLETED:{\n        return action.payload.order\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n\nconst HashtagOrder = (state = [], action) => {\n    switch(action.type) {\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED: {\n        return action.payload.order;\n      }\n      case types.HASHTAG_SEARCH_FETCHED_COMPLETED:{\n          return action.payload.order\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\nconst isFetchingUser = (state = false, action) => {\n  switch(action.type) {\n    case types.USER_SEARCH_FETCHED_STARTED: {\n      return true;\n    }\n    case types.USER_SEARCH_FETCHED_COMPLETED: {\n      return false;\n    }\n    case types.USER_SEARCH_FETCHED_FAILED: {\n      return false;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_STARTED: {\n      return true;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_COMPLETED: {\n      return false;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_FAILED: {\n      return false;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst isFetchingHashtag = (state = false, action) => {\n    switch(action.type) {\n      case types.HASHTAG_SEARCH_FETCHED_STARTED: {\n        return true;\n      }\n      case types.HASHTAG_SEARCH_FETCHED_COMPLETED: {\n        return false;\n      }\n      case types.HASHTAG_SEARCH_FETCHED_FAILED: {\n        return false;\n      }\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_STARTED: {\n        return true;\n      }\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED: {\n        return false;\n      }\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_FAILED: {\n        return false;\n      }\n      default: {\n        return state;\n      }\n    }\n  };\n\nconst errorUser = (state = null, action) => {\n  switch(action.type) {\n    case types.USER_SEARCH_FETCHED_FAILED: {\n      return action.payload.error;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_FAILED: {\n      return action.payload.error;\n    }\n    case types.USER_SEARCH_FETCHED_COMPLETED: {\n      return null;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_STARTED: {\n        return null;\n    }\n    case types.USER_SEARCH_HISTORY_FETCHED_STARTED: {\n        return null;\n    }\n    case types.USER_SEARCH_FETCHED_STARTED: {\n        return null;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n  const errorHashtag = (state = null, action) => {\n    switch(action.type) {\n      case types.HASHTAG_SEARCH_FETCHED_FAILED: {\n        return action.payload.error;\n      }\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_FAILED: {\n        return action.payload.error;\n      }\n      case types.HASHTAG_SEARCH_FETCHED_COMPLETED: {\n        return null;\n      }\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_COMPLETED: {\n          return null;\n      }\n      case types.HASHTAG_SEARCH_FETCHED_STARTED: {\n          return null;\n      }\n      case types.HASHTAG_SEARCH_HISTORY_FETCHED_STARTED: {\n          return null;\n      }default: {\n        return state;\n      }\n    }\n};\n\nexport default combineReducers({\n    users,\n    hashtags,\n    HashtagOrder,\n    UserOrder,\n    errorHashtag,\n    errorUser,\n    isFetchingHashtag,\n    isFetchingUser\n  });\n  \n  export const getUser = (state, id) => state.users[id];\n  export const getHashtag = (state,id) => state.hashtags[id]\n\n  export const getSearchedUsers = state => state.UserOrder.map(id => getUser(state, id));\n  export const getSearchedHashtag = state => state.HashtagOrder.map(id => {\n    console.log(id)  \n    getHashtag(state, id)});\n  export const getisFetchingHashtag = state => state.isFetchingHashtag;\n  export const getisFetchingSearchedUser = state => state.isFetchingUser;\n  export const getError_Hashtag_search = state => state.errorHashtag;\n  export const getError_User_search = state => state.errorUser;"]},"metadata":{},"sourceType":"module"}