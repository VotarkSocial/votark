{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\nimport * as types from \"../types/comment\";\n\nvar byId = function byId() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.COMMENTS_FETCHING_COMPLETED:\n      {\n        var _action$payload = action.payload,\n            entities = _action$payload.entities,\n            _order = _action$payload.order;\n        var newState = {};\n\n        _order.forEach(function (id) {\n          newState[id] = _objectSpread(_objectSpread({}, entities[id]), {}, {\n            isConfirmed: true\n          });\n        });\n\n        return newState;\n      }\n\n    case types.COMMENT_ADDITION_STARTED:\n      {\n        var _newState = _objectSpread({}, state);\n\n        _newState[action.payload.id] = _objectSpread(_objectSpread({}, action.payload), {}, {\n          isConfirmed: false\n        });\n        return _newState;\n      }\n\n    case types.COMMENT_ADDITION_COMPLETED:\n      {\n        var _action$payload2 = action.payload,\n            oldId = _action$payload2.oldId,\n            Comment = _action$payload2.Comment;\n\n        var _newState2 = omit(state, oldId);\n\n        _newState2[Comment.id] = _objectSpread(_objectSpread({}, Comment), {}, {\n          isConfirmed: true\n        });\n        return _newState2;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar order = function order() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.COMMENTS_FETCHING_COMPLETED:\n      {\n        return [].concat(_toConsumableArray(state), _toConsumableArray(action.payload.order));\n      }\n\n    case types.COMMENT_ADDITION_STARTED:\n      {\n        return [].concat(_toConsumableArray(state), [action.payload.id]);\n      }\n\n    case types.COMMENT_ADDITION_COMPLETED:\n      {\n        var _action$payload3 = action.payload,\n            oldId = _action$payload3.oldId,\n            petOwner = _action$payload3.petOwner;\n        return state.map(function (id) {\n          return id === oldId ? petOwner.id : id;\n        });\n      }\n\n    case types.NULL_SETTED:\n      {\n        return [];\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar isFetching = function isFetching() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.COMMENTS_FETCHING_STARTED:\n      {\n        return true;\n      }\n\n    case types.COMMENTS_FETCHING_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.COMMENTS_FETCHING_FAILED:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nvar error = function error() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.COMMENTS_FETCHING_FAILED:\n      {\n        return action.payload.error;\n      }\n\n    case types.COMMENTS_FETCHING_STARTED:\n      {\n        return null;\n      }\n\n    case types.COMMENTS_FETCHING_COMPLETED:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default combineReducers({\n  byId: byId,\n  order: order,\n  isFetching: isFetching,\n  error: error\n});\nexport var getComment = function getComment(state, id) {\n  return state.byId[id];\n};\nexport var getComments = function getComments(state) {\n  return state.order.map(function (id) {\n    return getComment(state, id);\n  });\n};\nexport var getisFetching = function getisFetching(state) {\n  return state.isFetching;\n};\nexport var getError = function getError(state) {\n  return state.error;\n};","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/reducers/comment.js"],"names":["omit","combineReducers","types","byId","state","action","type","COMMENTS_FETCHING_COMPLETED","payload","entities","order","newState","forEach","id","isConfirmed","COMMENT_ADDITION_STARTED","COMMENT_ADDITION_COMPLETED","oldId","Comment","petOwner","map","NULL_SETTED","isFetching","COMMENTS_FETCHING_STARTED","COMMENTS_FETCHING_FAILED","error","getComment","getComments","getisFetching","getError"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\nimport { combineReducers } from 'redux';\n\nimport * as types from '../types/comment';\n\n\nconst byId = (state = {}, action) => {\n  switch(action.type) {\n    case types.COMMENTS_FETCHING_COMPLETED: {\n      const { entities, order } = action.payload;\n      const newState = { };\n      order.forEach(id => {\n        newState[id] = {\n          ...entities[id],\n          isConfirmed: true,\n        };\n      });\n\n      return newState;\n    }\n    case types.COMMENT_ADDITION_STARTED: {\n      const newState = { ...state };\n      newState[action.payload.id] = {\n        ...action.payload,\n        isConfirmed: false,\n      };\n      return newState;\n    }\n    case types.COMMENT_ADDITION_COMPLETED: {\n      const { oldId, Comment } = action.payload;\n      const newState = omit(state, oldId);\n      newState[Comment.id] = {\n        ...Comment,\n        isConfirmed: true,\n      };\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst order = (state = [], action) => {\n  switch(action.type) {\n    case types.COMMENTS_FETCHING_COMPLETED: {\n      return [...state, ...action.payload.order];\n    }\n    case types.COMMENT_ADDITION_STARTED: {\n      return [...state, action.payload.id];\n    }\n    case types.COMMENT_ADDITION_COMPLETED: {\n      const { oldId, petOwner } = action.payload;\n      return state.map(id => id === oldId ? petOwner.id : id);\n    }\n    case types.NULL_SETTED:{\n        return []\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst isFetching = (state = false, action) => {\n  switch(action.type) {\n    case types.COMMENTS_FETCHING_STARTED: {\n      return true;\n    }\n    case types.COMMENTS_FETCHING_COMPLETED: {\n      return false;\n    }\n    case types.COMMENTS_FETCHING_FAILED: {\n      return false;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst error = (state = null, action) => {\n  switch(action.type) {\n    case types.COMMENTS_FETCHING_FAILED: {\n      return action.payload.error;\n    }\n    case types.COMMENTS_FETCHING_STARTED: {\n      return null;\n    }\n    case types.COMMENTS_FETCHING_COMPLETED: {\n      return null;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n\nexport default combineReducers({\n  byId,\n  order,\n  isFetching,\n  error,\n});\n\nexport const getComment = (state, id) => state.byId[id];\nexport const getComments = state => state.order.map(id => getComment(state, id));\nexport const getisFetching = state => state.isFetching;\nexport const getError = state => state.error;\n"]},"metadata":{},"sourceType":"module"}