{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = _regeneratorRuntime.mark(commentFetch),\n    _marked2 = _regeneratorRuntime.mark(watchCommentFetch),\n    _marked3 = _regeneratorRuntime.mark(addComment),\n    _marked4 = _regeneratorRuntime.mark(watchCommentAddition);\n\nimport { call, takeEvery, put, delay, select } from 'redux-saga/effects';\nimport * as selectors from \"../reducers\";\nimport * as actions from \"../actions/comment\";\nimport * as types from \"../types/comment\";\nimport { API_URL } from \"../../configuration\";\nimport { normalize } from 'normalizr';\nimport * as schemas from \"../schemas/comment\";\nvar API_BASE_URL = API_URL + 'api/v1';\n\nfunction commentFetch(action) {\n  var isAuth, token, response, jsonResult, normalized, _yield$response$json, non_field_errors;\n\n  return _regeneratorRuntime.wrap(function commentFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context.sent;\n\n          if (!isAuth) {\n            _context.next = 26;\n            break;\n          }\n\n          _context.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context.sent;\n          _context.next = 10;\n          return call(fetch, API_BASE_URL + \"/versus/\" + action.payload.vaersusid + \"/comments/\", {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 10:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 14;\n          return response.json();\n\n        case 14:\n          jsonResult = _context.sent;\n          normalized = normalize(jsonResult, schemas.comments);\n          _context.next = 18;\n          return put(actions.completeFetchingComments(normalized.entities.comments, normalized.result));\n\n        case 18:\n          _context.next = 26;\n          break;\n\n        case 20:\n          _context.next = 22;\n          return response.json();\n\n        case 22:\n          _yield$response$json = _context.sent;\n          non_field_errors = _yield$response$json.non_field_errors;\n          _context.next = 26;\n          return put(actions.failFetchingComments(non_field_errors[0]));\n\n        case 26:\n          _context.next = 32;\n          break;\n\n        case 28:\n          _context.prev = 28;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 32;\n          return put(actions.failFetchingComments('NETWORK ERROR'));\n\n        case 32:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 28]]);\n}\n\nexport function watchCommentFetch() {\n  return _regeneratorRuntime.wrap(function watchCommentFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(types.COMMENTS_FETCHING_STARTED, commentFetch);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addComment(action) {\n  var isAuth, token, user, response, jsonResult;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return select(selectors.isAuthenticated);\n\n        case 3:\n          isAuth = _context3.sent;\n\n          if (!isAuth) {\n            _context3.next = 22;\n            break;\n          }\n\n          _context3.next = 7;\n          return select(selectors.getAuthToken);\n\n        case 7:\n          token = _context3.sent;\n          _context3.next = 10;\n          return select(selectors.getAuthUserID);\n\n        case 10:\n          user = _context3.sent;\n          _context3.next = 13;\n          return call(fetch, API_BASE_URL + \"/comment/\", {\n            method: 'POST',\n            body: JSON.stringify(_objectSpread(_objectSpread({}, action.payload), {}, {\n              user: user\n            })),\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"JWT \" + token\n            }\n          });\n\n        case 13:\n          response = _context3.sent;\n\n          if (!(response.status === 201)) {\n            _context3.next = 22;\n            break;\n          }\n\n          _context3.next = 17;\n          return response.json();\n\n        case 17:\n          jsonResult = _context3.sent;\n          _context3.next = 20;\n          return put(actions.completeAddingComment(action.payload.id, jsonResult));\n\n        case 20:\n          _context3.next = 22;\n          break;\n\n        case 22:\n          _context3.next = 26;\n          break;\n\n        case 24:\n          _context3.prev = 24;\n          _context3.t0 = _context3[\"catch\"](0);\n\n        case 26:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 24]]);\n}\n\nexport function watchCommentAddition() {\n  return _regeneratorRuntime.wrap(function watchCommentAddition$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(types.COMMENT_ADDITION_STARTED, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/thecoder/Documentos/votark/votark/src/sagas/comments.js"],"names":["commentFetch","watchCommentFetch","addComment","watchCommentAddition","call","takeEvery","put","delay","select","selectors","actions","types","API_URL","normalize","schemas","API_BASE_URL","action","isAuthenticated","isAuth","getAuthToken","token","fetch","payload","vaersusid","method","headers","response","status","json","jsonResult","normalized","comments","completeFetchingComments","entities","result","non_field_errors","failFetchingComments","COMMENTS_FETCHING_STARTED","getAuthUserID","user","body","JSON","stringify","completeAddingComment","id","COMMENT_ADDITION_STARTED"],"mappings":"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","sourcesContent":["import {\n    call,\n    takeEvery,\n    put,\n    // race,\n    // all,\n    delay,\n    select,\n  } from 'redux-saga/effects';\n\nimport * as selectors from '../reducers';\nimport * as actions from '../actions/comment';\nimport * as types from '../types/comment';\nimport { API_URL } from '../../configuration';\nimport { normalize } from 'normalizr';\nimport * as schemas from '../schemas/comment';\n  \n  const API_BASE_URL =  API_URL + 'api/v1';\n  \n  \n  function* commentFetch(action) {\n    try {\n        const isAuth = yield select(selectors.isAuthenticated);\n    \n        if (isAuth) {\n          const token = yield select(selectors.getAuthToken);\n          const response = yield call(\n            fetch,\n            `${API_BASE_URL}/versus/${action.payload.vaersusid}/comments/`,\n            {\n              method: 'GET',\n              headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const jsonResult = yield response.json();\n            const normalized = normalize(jsonResult, schemas.comments);\n            yield put(\n            actions.completeFetchingComments(\n                normalized.entities.comments,\n                normalized.result\n            ),\n            );\n          } else {\n            const { non_field_errors } = yield response.json();\n            yield put(actions.failFetchingComments(non_field_errors[0]));\n          }\n        }\n      } catch (error) {\n        yield put(actions.failFetchingComments('NETWORK ERROR'));\n      }\n  }\n  \n  export function* watchCommentFetch() {\n    yield takeEvery(\n      types.COMMENTS_FETCHING_STARTED,\n      commentFetch,\n    );\n  }\n\nfunction* addComment(action) {\n    try {\n      const isAuth = yield select(selectors.isAuthenticated);\n  \n      if (isAuth) {\n        const token = yield select(selectors.getAuthToken);\n        const user = yield select(selectors.getAuthUserID);\n        const response = yield call(\n          fetch,\n          `${API_BASE_URL}/comment/`,\n          {\n            method: 'POST',\n            body: JSON.stringify({...action.payload,user}),\n            headers:{\n              'Content-Type': 'application/json',\n              'Authorization': `JWT ${token}`,\n            },\n          }\n        );\n  \n        if (response.status === 201) {\n          const jsonResult = yield response.json();\n          yield put(\n            actions.completeAddingComment(\n              action.payload.id,\n              jsonResult,\n            ),\n          );\n        } else {\n          // const { non_field_errors } = yield response.json();\n          // yield put(actions.failLogin(non_field_errors[0]));\n        }\n      }\n    } catch (error) {\n      // yield put(actions.failLogin('Falló horrible la conexión mano'));\n    }\n  }\n\n  export function* watchCommentAddition() {\n    yield takeEvery(\n      types.COMMENT_ADDITION_STARTED,\n      addComment,\n    );\n  }"]},"metadata":{},"sourceType":"module"}